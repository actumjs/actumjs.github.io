(this.webpackJsonpactumdoc=this.webpackJsonpactumdoc||[]).push([[0],{264:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),r=n(12),i=n.n(r),s=(n(71),n(6)),c=n(7),l=n(9),d=n(8),m=n(299),u=n(300),p=n(33),h=n(297),g=n(40),f=n.n(g),E=n(23),v=n.n(E),w=n(305),b=n(293),x=n(307),y=n(296),j=n(298),T=n(291),N=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).gotPage=function(){window.location.href=a.props.url,document.title=a.props.text},a}return Object(c.a)(n,[{key:"render",value:function(){return o.a.createElement(p.a,{variant:"subtitle2",onClick:this.gotPage,style:{cursor:"pointer"}},this.props.text)}}]),n}(o.a.Component),A=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(c.a)(n,[{key:"render",value:function(){return o.a.createElement("div",{style:{padding:"0px 10px",borderBottom:""}},o.a.createElement(T.a,{variant:"text",color:"primary",onClick:this.props.onClick,style:{padding:0}},o.a.createElement(N,{url:this.props.url,text:this.props.text})))}}]),n}(o.a.Component),k=n(292),S=n(306),C=n(295),L=n(294);var I=n(57),R=n.n(I),D=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).noResultsFound=function(){return o.a.createElement("div",{style:{width:"100%",display:"flex",justifyContent:"center",alignItems:"center"}},o.a.createElement("img",{src:"/no-data.png",style:{width:"50%"}}))},a.getSearchResult=function(){if(""==a.state.searchText)return null;var e,t=(e=a.state.searchText,[{name:"Actumjs",link:"/",keywords:"Actumjs A state management library for javascript app. Light weight Easy to use Portable ",description:""},{name:"Get Started",link:"/get-started",keywords:"Actumjs What is Actumjs? Why Actumjs? Installation Using NPM Using Yarn With browser script tag Core Concept  Store Actions Listeners",description:""},{name:"Api Reference",link:"/api",keywords:"Actumjs API Reference Using with script tag Using with import statement  Creating store addAction before after removeAction replaceActionCallback trigger getState Adding actions Listening to actions Removing Listener Removing an action Trigger an action Replacing an action callback Reading Data from store Directory structure",description:""},{name:"Examples",link:"/examples",keywords:"Actumjs Examples Using with Reactjs Using with Vuejs Todo App with Reactjs Todo App With Vuejs",description:""}].filter((function(t){return t.keywords.toLowerCase().includes(e.trim().toLowerCase())}))),n="";0==t.length?(n=o.a.createElement(p.a,null,"Sorry no results for `",a.state.searchText,"` !"),t=a.noResultsFound()):(t=t.map((function(e){return o.a.createElement(x.a,{component:T.a,href:e.link,onClick:function(){window.location.href=e.link}},o.a.createElement(k.a,null,o.a.createElement(R.a,null)),e.name)})),t=o.a.createElement(b.a,null,t),n=o.a.createElement(p.a,null,"Showing results for ",a.state.searchText));var r={borderRadius:"33px",borderTopRightRadius:0,borderTopLeftRadius:0,position:"absolute",left:"45%",right:"0",background:"white",top:"64px",bottom:"-260px",border:"1px solid #8080802b",borderTop:"none",listStyle:"none",padding:"30px"};return window.screen.width<=768&&(r={borderRadius:"33px",borderTopRightRadius:0,borderTopLeftRadius:0,position:"absolute",left:"0",right:"0",background:"white",top:"50px",bottom:"-260px",border:"1px solid #8080802b",borderTop:"none",listStyle:"none",padding:"30px"}),t=o.a.createElement("div",{style:r},n,t)},a.state={focus:!1,searchText:""},a.searchBox=o.a.createRef(),a}return Object(c.a)(n,[{key:"componentDidMount",value:function(){window.screen.width<=500&&this.searchBox.current&&this.searchBox.current.focus()}},{key:"render",value:function(){var e=this,t=200;this.state.focus&&(t=300),this.props.width&&(t=this.props.width);var n=this.getSearchResult();return o.a.createElement(o.a.Fragment,null," ",o.a.createElement(L.a,Object.assign({in:!0,style:{transformOrigin:"0 0 0"}},{timeout:1e3}),o.a.createElement(S.a,{defaultValue:"",inputProps:{"aria-label":"description"},disableUnderline:!0,inputRef:this.searchBox,onChange:function(t){e.setState({searchText:t.target.value})},style:{width:t,background:"#d3d3d352",padding:"5px",borderRadius:"50px"},onFocus:function(){e.setState({focus:!0})},onBlur:function(){window.screen.width<768&&null!=n||(e.props.onBlur?e.props.onBlur():e.setState({focus:!1}))},startAdornment:o.a.createElement(C.a,{position:"start"},o.a.createElement(f.a,null))})),n)}}]),n}(o.a.Component),O=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).handleSrceenResize=function(){a.setState({update:!a.state.update,open:!1})},a.renderDrawer=function(){return o.a.createElement(w.a,{open:a.state.open,onClose:a.toggleDrawer},o.a.createElement("div",{style:{width:Math.max([window.screen.width/2,400])}},o.a.createElement(b.a,null,o.a.createElement(x.a,{button:!0},o.a.createElement("div",{style:{display:"flex",justifyContent:"space-around",width:"180px",alignItems:"center"}},o.a.createElement("div",null,o.a.createElement("img",{src:"/logo.png",style:{width:"50px",height:"50px"}})),o.a.createElement("div",null,o.a.createElement(p.a,{variant:"h4"},"Actumjs")))),["Home","Getting Started","API","FAQ","GitHub","Need Help?"].map((function(e,t){return o.a.createElement(x.a,{button:!0,key:e},o.a.createElement(y.a,{primary:e}))})))))},a.renderMenu=function(){if(window.screen.width<=768){var e=null;return window.screen.width>500?e=o.a.createElement("div",{style:{paddingRight:10}},o.a.createElement(D,null)):a.state.showSearchBox||(e=o.a.createElement(h.a,{edge:"start",color:"inherit","aria-label":"menu",onClick:function(){a.setState({showSearchBox:!0})}},o.a.createElement(f.a,null))),o.a.createElement(j.a,{container:!0,justify:"flex-end"},o.a.createElement(j.a,null,e),o.a.createElement(j.a,null,o.a.createElement(h.a,{edge:"start",color:"inherit","aria-label":"menu",onClick:a.toggleDrawer},o.a.createElement(v.a,null))))}return o.a.createElement(j.a,{container:!0,justify:"flex-end",spacing:8},o.a.createElement(j.a,null,o.a.createElement(A,{text:"Home",url:"/"})),o.a.createElement(j.a,null,o.a.createElement(A,{text:"Get Started",url:"/get-started"})),o.a.createElement(j.a,null,o.a.createElement(A,{text:"API Documentation",url:"/api"})),o.a.createElement(j.a,null,o.a.createElement(A,{text:"Examples",url:"/examples"})),o.a.createElement(j.a,null,o.a.createElement("div",{style:{paddingRight:10,marginTop:-11}},o.a.createElement(D,null))))},a.toggleDrawer=function(){a.setState({open:!a.state.open})},a.state={open:!1,update:!1,showSearchBox:!1},window.addEventListener("resize",a.handleSrceenResize),a}return Object(c.a)(n,[{key:"render",value:function(){var e=this,t=this.renderDrawer(),n=this.renderMenu(),a=o.a.createElement("div",null,o.a.createElement(p.a,{variant:"h4"},"Actumjs"));return window.screen.width<500&&this.state.showSearchBox&&(a=o.a.createElement("div",{style:{marginRight:"-69px"}},o.a.createElement(D,{width:"200px",onBlur:function(){e.setState({showSearchBox:!1})}}))),o.a.createElement(o.a.Fragment,null,o.a.createElement(m.a,{position:"fixed",style:{background:"white",color:"black",paddingTop:"10px"}},o.a.createElement(u.a,null,o.a.createElement("div",{style:{display:"flex",justifyContent:"space-around",width:"180px",alignItems:"center"}},o.a.createElement("div",null,o.a.createElement("img",{src:"/logo.png",style:{width:"50px",height:"50px"}})),a),n)),t)}}]),n}(o.a.Component),F=n(265),M=n(48),V=n.n(M),B=n(47),W=n.n(B),_=(n(262),function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).handleSrceenResize=function(){a.setState({update:!a.state.update})},a.renderFeatures=function(){return o.a.createElement(j.a,{container:!0,style:{padding:"50px 10px 50px 10px",background:"#f1f0ff",justifyContent:"space-around"}},[{title:"Light weight",image:"light.png",text:"Actumjs is small enough to fit in just 5kb.Making it easy to load and  compile at run time.Being small in size actumjs require minimum resources to work."},{title:"Easy to use",image:"easy.png",text:"State management libraries for javascript require you to have some level of expertise with programming to use it.whereas you can start using Actumjs with very basic programming  skills"},{title:"Portable",image:"portable.png",text:"Actumjs provides you the way to create applications that execute seamlessly."}].map((function(e,t){return o.a.createElement(j.a,{key:t,item:!0,md:6,sm:6,lg:3,xs:12,style:{display:"flex",justifyContent:"center",alignItems:"center",padding:"5px",marginTop:"20px"}},o.a.createElement(F.a,null,o.a.createElement("div",{style:{width:"250px",height:"320px",padding:"10px",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"}},o.a.createElement("div",null,o.a.createElement("img",{src:"images/"+e.image,style:{width:"200px"}})),o.a.createElement("div",null,o.a.createElement(p.a,{variant:"h5"},e.title)),o.a.createElement("div",{style:{padding:"10px"}},o.a.createElement(p.a,{variant:"subtitle2"},e.text)))))})))},a.state={update:!1},window.addEventListener("resize",a.handleSrceenResize),a}return Object(c.a)(n,[{key:"render",value:function(){var e=this.renderFeatures();V.a.registerLanguage("javascript",W.a);V.a.highlight("javascript","var a=10;for(i=0;i<10;i++)alert(a) console.log(a)").value;return o.a.createElement("div",{style:{marginTop:"75px",color:"white"}},o.a.createElement(j.a,{container:!0},o.a.createElement(j.a,{item:!0,xs:12,sm:6,md:6,lg:6},o.a.createElement("div",{style:{background:"#0080ff"}},o.a.createElement("div",{style:{display:"flex",justifyContent:"space-around",flexDirection:"column",padding:"10px",alignItems:"center",minHeight:"200px"}},o.a.createElement("div",{style:{background:"white",padding:"10px",border:"10px solid white",borderRadius:"50%"}},o.a.createElement("img",{src:"/logo.png",style:{width:"100px",height:"100px"}})),o.a.createElement(p.a,{variant:"h3",color:"inherit"},"Actumjs"),o.a.createElement(p.a,{variant:"h5",align:"center"},"A state management library for javascript app.")),o.a.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",padding:"10px"}},o.a.createElement(T.a,{variant:"contained",size:"large"},o.a.createElement(N,{url:"/get-started",text:"Get started"}))))),o.a.createElement(j.a,{item:!0,xs:12,sm:6,md:6,lg:6},o.a.createElement("div",{style:{display:window.screen.width<500?"none":"flex",justifyContent:"center",alignItems:"center",height:"100%"}},o.a.createElement("img",{src:"/home_intro.svg",style:{width:"50%",height:"50%"}})))),e)}}]),n}(o.a.Component)),U=n(301),q=n(302),P=n(32),z=n.n(P),$=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).renderCode=function(){var e=window.screen.width<=768?"consoleStyleMobile":"consoleStyle",t=a.props.lines,n=a.props.lang,r="80%";window.screen.width<=768&&(r=window.screen.width-40);return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",null,o.a.createElement("pre",{className:e,style:{width:r}},t.map((function(e,t){return a.renderHtmlCode(e,n)})))))},a.renderHtmlCode=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"html",n=z.a.highlight(e,z.a.languages[t],t);return o.a.createElement("code",{key:Math.random(),ref:a.inputbox,dangerouslySetInnerHTML:{__html:n}})},a.copyToClipBoard=function(){var e=document.createRange();e.selectNode(a.inputbox.current),window.getSelection().removeAllRanges(),window.getSelection().addRange(e),document.execCommand("copy"),window.getSelection().removeAllRanges(),a.setState({copied:!0}),setTimeout((function(){a.setState({copied:!1})}),1200)},a.state={copied:!1},a.inputbox=o.a.createRef(),a}return Object(c.a)(n,[{key:"render",value:function(){return this.renderCode()}}]),n}(o.a.Component),J=n(303),H=n(304),Y=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).toggleDrawer=function(){a.setState({open:!a.state.open})},a.update=function(){a.setState({update:!a.state.update})},a.mobileView=function(){var e=a.renderSideMenu(),t=a.whatIsActumJs(),n=a.whyActumJs(),r=a.installation(),i=a.CoreConcept();return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{style:{padding:"10px",marginTop:"20px"}},o.a.createElement("div",null,e),t,n,r,i))},a.getListItem=function(){return["What is Actumjs","Why Actumjs?","Installation","Core Concepts"]},a.whatIsActumJs=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement("div",{ref:a.whatIsActumJsRef},o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"What is Actumjs? "),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Actumjs is a Javascript library to manage application state. You can use Actumjs with front-end libraries and frameworks like Reactjs,Vue and Angular.",o.a.createElement("br",null),"it provides a state which is accessible to all other components of an application.",o.a.createElement("br",null),"The only way to to update the applicaiton state is to trigger an action.",o.a.createElement("br",null)))},a.whyActumJs=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement("div",{ref:a.whyActumJsRef},o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Why Actumjs? "),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Managing applicaiton state is arguably the hardest part of any Javascript application development. Specially when,communication between components is done in simplex manner(top to down).",o.a.createElement("br",null),"There are so many state management libraries available and more coming around every day.",o.a.createElement("br",null),"While developing Javascript app with front-end frameworks and libs (Reactjs,Vue and Angular), the main problem is sharing application state with other components.",o.a.createElement("br",null),"we know react provides one directional communication to its components(parent component pass its state to child component in terms of props),this becomes harder when it comes to write application having  large number of components. that's why we have Actumjs."))},a.installation=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";window.screen.width;return o.a.createElement("div",{ref:a.installationRef},o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Installation"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},o.a.createElement("br",null),o.a.createElement("b",null,"Using NPM"),o.a.createElement($,{lines:["npm install --save actum"],lang:"js"}),o.a.createElement("br",null),o.a.createElement("b",null,"Using Yarn"),o.a.createElement($,{lines:[" yarn add actum"],lang:"js"}),o.a.createElement("b",null,"With browser script tag"),o.a.createElement($,{lines:['<script type = "text/Javascript" src = "your/path/to/actum.js"><\/script>'],lang:"html"})))},a.CoreConcept=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription",t=window.screen.width<=768?"100%":"800px";return o.a.createElement("div",{ref:a.CoreConceptRef},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Core Concept"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Consider the traditional way to manage app state with Reactjs.",o.a.createElement("br",null),"We have components passing its state to child components using props.",o.a.createElement(j.a,{container:!0},o.a.createElement(j.a,{item:!0,xs:12,sm:12,lg:6,md:6},o.a.createElement("img",{src:"/images/simplex.png",style:{width:"100%",height:"100%"}}))),"This is quite a simple way we can use with small web apps.",o.a.createElement("br",null),"Now ,things goes worst when it comes to make an app with  more components.",o.a.createElement("br",null),"Passing data in this way dastrically become tadious.",o.a.createElement("br",null),"In this case we need to communicate with bidirectional way like this",o.a.createElement(j.a,{container:!0},o.a.createElement(j.a,{item:!0,xs:12,sm:12,lg:8,md:8},o.a.createElement("img",{src:"/images/duplex.png",style:{width:"100%"}}))),o.a.createElement("br",null),"Actumsjs provides communication between data and component in the following way:",o.a.createElement("br",null),o.a.createElement("ul",null,o.a.createElement("li",null,"A global object representing app state called store is created."),o.a.createElement("li",null,"Actions are added to store"),o.a.createElement("li",null,"Actions update applicaiton state"),o.a.createElement("li",null,"Component subscribe to store updates by using listeners"),o.a.createElement("li",null,"Listeners provides way to response to store changes"),o.a.createElement("li",null,"Store data is available to other components")),o.a.createElement(j.a,{container:!0},o.a.createElement(j.a,{item:!0,xs:12,sm:12,lg:12,md:12},o.a.createElement("img",{src:"/images/actum.png",style:{width:t}}))),"Actumjs is based on following object and functions to implement state management mechanism",o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement(p.a,{variant:"text"},"Store")),o.a.createElement("li",null,o.a.createElement(p.a,{variant:"text"},"Actions")),o.a.createElement("li",null,o.a.createElement(p.a,{variant:"text"},"Listeners"))),o.a.createElement("br",null)),o.a.createElement(j.a,{container:!0,justify:"space-between"},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/"},o.a.createElement(J.a,null),"Home")),o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/api"},"Api Reference",o.a.createElement(H.a,null)))))},a.scrollContent=function(e){var t=[a.whatIsActumJsRef,a.whyActumJsRef,a.installationRef,a.CoreConceptRef][e].current.offsetTop-80;window.scrollTo(0,t),a.toggleDrawer()},a.renderSideMenu=function(){var e=null,t=null;return window.screen.width<=768?a.state.open?(e=a.getListItem(),t=o.a.createElement(b.a,{style:{color:"black",position:"sticky",top:"74px",left:"0"}},e.map((function(e,t){return o.a.createElement(x.a,{button:!0,alignItems:"flex-start",onClick:function(){a.scrollContent(t)}},o.a.createElement(y.a,{padding:"56"},e))})),o.a.createElement(x.a,{button:!0,alignItems:"flex-start",onClick:a.toggleDrawer},o.a.createElement(y.a,{padding:"56"},"Close"))),o.a.createElement("div",{className:"menuListContainer"},t)):o.a.createElement("div",{style:{position:"fixed",bottom:0,left:0}},o.a.createElement(h.a,{className:"sideButtom",edge:"start",color:"inherit","aria-label":"menu",onClick:a.toggleDrawer},o.a.createElement(v.a,null))):(e=a.getListItem(),t=null,t=o.a.createElement(b.a,{style:{color:"black",position:"sticky",top:"74px",left:"0"}},e.map((function(e,t){return o.a.createElement(x.a,{button:!0,alignItems:"flex-start",onClick:function(){a.scrollContent(t)}},o.a.createElement(y.a,{padding:"56"},e))}))))},a.normalView=function(){var e=a.renderSideMenu(),t=a.whatIsActumJs(),n=a.whyActumJs(),r=a.installation(),i=a.CoreConcept();return o.a.createElement(j.a,{container:!0},o.a.createElement(j.a,{md:2,lg:2},e),o.a.createElement(j.a,{md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"150px",paddingRight:"150px"}},t,n,r,i)))},window.addEventListener("resize",a.update),a.state={update:!1,open:!1},a.whatIsActumJsRef=o.a.createRef(),a.whyActumJsRef=o.a.createRef(),a.installationRef=o.a.createRef(),a.CoreConceptRef=o.a.createRef(),a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),G=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(c.a)(n,[{key:"render",value:function(){var e=(new Date).getFullYear();return o.a.createElement(j.a,{container:!0,justify:"space-around",style:{background:"#0080ff",color:"white"}},o.a.createElement(j.a,{item:!0,xs:12,sm:4,md:4,lg:4},o.a.createElement("div",{style:{display:"flex",justifyContent:"center"}},o.a.createElement(b.a,null,o.a.createElement(x.a,null,o.a.createElement(y.a,null,o.a.createElement(p.a,{variant:"h6"},"Links"))),o.a.createElement(x.a,null,o.a.createElement(y.a,null,o.a.createElement(N,{url:"/",text:"Home"}))),o.a.createElement(x.a,null,o.a.createElement(y.a,null,o.a.createElement(N,{url:"/get-started",text:"Get started"}))),o.a.createElement(x.a,null,o.a.createElement(y.a,null,o.a.createElement(N,{url:"/api",text:"Api Documentation"}))),o.a.createElement(x.a,null,o.a.createElement(y.a,null,o.a.createElement(N,{url:"/examples",text:"Examples"})))))),o.a.createElement(j.a,{item:!0,xs:12,sm:4,md:4,lg:4},o.a.createElement("div",{style:{display:"flex",justifyContent:"center"}})),o.a.createElement(j.a,{item:!0,xs:12,sm:4,md:4,lg:4}),o.a.createElement(j.a,{item:!0,xs:12,sm:12,lg:12,md:12},o.a.createElement("div",{style:{padding:"20px"}},o.a.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",padding:"20px"}},o.a.createElement("div",{style:{background:"white",border:"10px solid white",borderRadius:"50%"}},o.a.createElement("img",{src:"/logo.png",style:{width:"50px",height:"50px"}})),o.a.createElement("div",{style:{padding:"5px"}},o.a.createElement(p.a,{variant:"h4"},"Actumjs"))),o.a.createElement(p.a,{align:"center"},"Copyright \xa9 ",e-1,"-",e-2e3,", Actumjs."))))}}]),n}(o.a.Component),Q=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).toggleDrawer=function(){a.setState({open:!a.state.open})},a.update=function(){a.setState({update:!a.state.update})},a.getListItem=function(){return["Using in browser with script tag","Using with require","Creating store","Adding actions","Listening to actions","Removing Listener","Executing listener for certain action","Removing an action","Trigger an action","Replacing an action callback","Reading Data from store"]},a.renderSideMenu=function(){var e=null,t=null;return window.screen.width<=768?a.state.open?(e=a.getListItem(),t=o.a.createElement(b.a,{style:{color:"black",position:"sticky",top:"74px",left:"0"}},e.map((function(e,t){return o.a.createElement(x.a,{key:t,button:!0,alignItems:"flex-start"},o.a.createElement(y.a,{padding:"56"},e))})),o.a.createElement(x.a,{button:!0,alignItems:"flex-start",onClick:a.toggleDrawer},o.a.createElement(y.a,{padding:"56"},"Close"))),o.a.createElement("div",{className:"menuListContainer"},t)):o.a.createElement("div",{style:{position:"fixed",bottom:0,left:0}},o.a.createElement(h.a,{className:"sideButtom",edge:"start",color:"inherit","aria-label":"menu",onClick:a.toggleDrawer},o.a.createElement(v.a,null))):(e=a.getListItem(),t=null,t=o.a.createElement(b.a,{style:{color:"black",position:"sticky",top:"74px",left:"0"}},e.map((function(e,t){return o.a.createElement(x.a,{key:t,button:!0,alignItems:"flex-start"},o.a.createElement(y.a,{padding:"56"},e))}))))},a.getHTMLCode=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"html",n=z.a.highlight(e,z.a.languages[t],t);return o.a.createElement("div",{dangerouslySetInnerHTML:{__html:n}})},a.normalView=function(){a.renderSideMenu();var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";window.screen.width;return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:8,lg:8},o.a.createElement(F.a,{style:{margin:"20px",padding:"50px"}},o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"API reference"),o.a.createElement(p.a,{className:e},"Actumjs  API has a very small number of functions to implement state management system. Actumjs require you to write callback functions to perform actions that  modify app state, and listeners to update ui components. This section provides complete reference to actumjs\u2019s set of functions to manage app state."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Using  with script tag"),o.a.createElement($,{lines:['\n<script src="./your/path/to/actum.js" type="text/javascript"><\/script>'],lang:"html"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Using with import statement"),o.a.createElement($,{lines:["\nimport {createStore} from '@actumjs/actum';\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Creating store"),o.a.createElement(p.a,{className:e},"You can create a store by calling  createStore function. createStore,requires an object representing the initial state of the app as an argument."),o.a.createElement($,{lines:["   //initial state of store\n","   const initial_state = { count:0 };         \n","   const store = createStore(initial_state);\n"],lang:"js"}),o.a.createElement(p.a,{className:e},"createStore returns a store object. You can export the store further to use with other components.",o.a.createElement("br",null),"Store object comes with following methods"),o.a.createElement("ul",{className:e,style:{paddingLeft:"30px"}},o.a.createElement("li",null,"addAction"),o.a.createElement("li",null,"before"),o.a.createElement("li",null,"after"),o.a.createElement("li",null,"removeAction"),o.a.createElement("li",null,"replaceActionCallback"),o.a.createElement("li",null,"trigger"),o.a.createElement("li",null,"getState")),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Adding actions"),o.a.createElement(p.a,{className:e},"The store object has the addAction method to add actions to the store. addAction method requires an  action name ,and a callback function."),o.a.createElement(p.a,{className:e},"an action callback  function will be called with payload and current state. the only way to modify state is to trigger an Action. consider the following action to increase  counter value of the store."),o.a.createElement($,{lines:["          \n",'store.addAction("increment",',"(payload,state)=>{ state.count++; });\n"],lang:"js"}),o.a.createElement(p.a,{className:e+" devtip"},"Note that ,an action callBack associated to an action can't trigger the same action from inside it."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Listening to actions"),o.a.createElement(p.a,{className:e},"In order to listen to  store updates,the component must add an action listener. Actumjs allows to execute listener  before and after exeuction of action. This can be done by using `after` and `before` methods of store object. Each method as the name suggest ,is specify the sequence at which the listener callback is called.",o.a.createElement("br",null),"Both methods require action name and callback . An actionName specify  action to which component want to listen updates. This makes sense when you want to update components based on certain action. The callback function when called will receive additional payload and proxy of current application state."),o.a.createElement($,{lines:["\n\n   //listening to increment action\n",'   const afterIncrement = store.after("increment",(payload,state)=>{\n',"        this.update();//your function to update component\n","    })\n\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Removing Listener"),o.a.createElement(p.a,{className:e},"As shown in above example we listen to store updates by adding listeners to store. When we add listener to action,using after or before method, we receive a function.",o.a.createElement("br",null),"In above example we hold that function in variable 'afterIncrement'. we can use it further to remove listener from action. Its good practice to remove listeners when component no longer  need to react on actions or component is unmounted."),o.a.createElement($,{lines:["\n\t//removing listener \n","\tafterIncrement();\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Removing an action"),o.a.createElement(p.a,{className:e},"An action can be removed  by making a call to removeAction of store object. All listeners attached to action will automatically be removed. This method requires only name of action."),o.a.createElement($,{lines:["\n","const {removeAction} = store;\n","//removing an action fetchdata\n","removeAction('fetchData');\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Trigger an action"),o.a.createElement(p.a,{className:e},"You can dispatch an action by calling trigger method of store object. This will execute action callback as well as action listeners. Trigger action requires action name to me executed. You can pass additional data to action as payload."),o.a.createElement($,{lines:["\n\n    const {trigger} = store;\n","    //triggering  an action increment           \n","    trigger('increment',null);\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Replacing an action callback"),o.a.createElement(p.a,{className:e},"replaceActionCallback is used to replace an existing callback  of an action.it requires action name and callback function. In following example we will try to replace increment action callback with new one,which increase count value by 2."),o.a.createElement($,{lines:["          \n","     const {replaceActionCallback}=store;\n",'     replaceActionCallback("increment",(payload,state)=>{\n',"        state.count+ = 2;\n","     });\n\n"],lang:"js"}),o.a.createElement(p.a,{className:e},"Now whenever increment action will be triggered ,it will increase  count value by two,instead of one."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Reading Data from store"),o.a.createElement(p.a,{className:e},"Actumjs provides getState method of store object to get the state of app. this method gives an proxy to  state of application store."),o.a.createElement($,{lines:["          \n","   const {getState} = store;\n","   let state = getState();\n",'   console.log("count is  : ",state.count);\n',"            \n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Directory structure"),o.a.createElement(p.a,{className:e},"Actumjs impose almost no restriction on where your application store and actions are placed. however its good practice to have file organized in well defined structure.",o.a.createElement("br",null),"Actumjs specify following directory structure",o.a.createElement("br",null),o.a.createElement("br",null),"\xa0\xa0|--src",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0|---store",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/index.js",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0|---actions",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/index.js"),o.a.createElement(j.a,{container:!0,justify:"space-between"},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/get-started"},o.a.createElement(J.a,null),"Get started")),o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},"Examples",o.a.createElement(H.a,null)))))))},a.mobileView=function(){a.renderSideMenu();var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";window.screen.width;return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:12,lg:12},o.a.createElement("div",{style:{marginTop:"40px",paddingLeft:"10px",paddingRight:"10px"}},o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"API reference"),o.a.createElement(p.a,{className:e},"Actumjs  API has a very small number of functions to implement state management system. Actumjs require you to write callback functions to perform actions that  modify app state, and listeners to update ui components. This section provides complete reference to actumjs\u2019s set of functions to manage app state."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Using  with script tag"),o.a.createElement($,{lines:['\n<script src="./your/path/to/actum.js" type="text/javascript"><\/script>'],lang:"html"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Using with import statement"),o.a.createElement($,{lines:["\nimport {createStore} from '@actumjs/actum'\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Creating store"),o.a.createElement(p.a,{className:e},"You can create a store by calling  createStore function. createStore,requires an object representing the initial state of the app as an argument."),o.a.createElement($,{lines:["   //initial state of store\n","   const initial_state = { count:0 };\n","   const store = createStore(initial_state)\n"],lang:"js"}),o.a.createElement(p.a,{className:e},"createStore returns a store object. You can export the store further to use with other components.",o.a.createElement("br",null),"Store object comes with following methods"),o.a.createElement("ul",{className:e,style:{paddingLeft:"30px"}},o.a.createElement("li",null,"addAction"),o.a.createElement("li",null,"before"),o.a.createElement("li",null,"after"),o.a.createElement("li",null,"removeAction"),o.a.createElement("li",null,"replaceActionCallback"),o.a.createElement("li",null,"trigger"),o.a.createElement("li",null,"getState")),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Adding actions"),o.a.createElement(p.a,{className:e},"The store object has the addAction method to add actions to the store. addAction method requires an  action name ,and a callback function."),o.a.createElement(p.a,{className:e},"an action callback  function will be called with payload and current state. the only way to modify state is to trigger an Action. consider the following action to increase  counter value of the store."),o.a.createElement($,{lines:['\nstore.addAction("increment",(payload,state)=>{ state.count++; })\n'],lang:"js"}),o.a.createElement(p.a,{className:e+" devtip"},"Note that ,an action callBack associated to an action can't trigger the same action from inside it."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Listening to actions"),o.a.createElement(p.a,{className:e},"In order to listen to  store updates,the component must add an action listener. Actumjs allows to execute listener  before and after exeuction of action. This can be done by using `after` and `before` methods of store object. Each method as the name suggest ,is specify the sequence at which the listener callback is called.",o.a.createElement("br",null),"Both methods require action name and callback . An actionName specify  action to which component want to listen updates. This makes sense when you want to update components based on certain action. The callback function when called will receive additional payload and the current application state."),o.a.createElement($,{lines:["\n\n       //listening to increment action\n",'       const afterIncrement = store.after("increment",(payload,state)=>{\n',"       //your function to update component\n        this.update();\n","       })\n\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Removing Listener"),o.a.createElement(p.a,{className:e},"As shown in above example we listen to store updates by adding listeners to store. When we add listener to action,using after or before method, we receive a function.",o.a.createElement("br",null),"In above example we hold that function in variable 'afterIncrement'. we can use it further to remove listener from action. Its good practice to remove listeners when component no longer  need to react on actions or component is unmounted."),o.a.createElement($,{lines:["\n\t//removing listener \n","\tafterIncrement();\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Removing an action"),o.a.createElement(p.a,{className:e},"An action can be removed  by making a call to removeAction of store object. All listeners attached to action will automatically be removed. This method requires only name of action."),o.a.createElement($,{lines:["\n","const  { removeAction } = store;\n","//removing an action fetchdata\n","removeAction('fetchData');\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Trigger an action"),o.a.createElement(p.a,{className:e},"You can dispatch an action by calling trigger method of store object. This will  execute action callback as well as action listeners. Trigger action requires action name to me executed. You can pass additional data to action as payload."),o.a.createElement($,{lines:["\n\n    const {trigger} = store;\n","    //triggering  an action increment           \n","    trigger('increment',null);\n\n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Replacing an action callback"),o.a.createElement(p.a,{className:e},"replaceActionCallback is used to replace an existing callback  of an action.it requires action name and callback function. In following example we will try to replace increment action callback with new one,which increase count value by 2."),o.a.createElement($,{lines:["          \n","     const {replaceActionCallback} = store;\n",'     replaceActionCallback("increment",(payload,state)=>{\n',"        state.count+=2;\n","     });\n\n"],lang:"js"}),o.a.createElement(p.a,{className:e},"Now whenever increment action will be triggered ,it will increase  count value by two,instead of one."),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Reading Data from store"),o.a.createElement(p.a,{className:e},"Actumjs provides getState method of store object to get the state of app. this method gives an proxy to  state of application store."),o.a.createElement($,{lines:["          \n","   const {getState} = store;\n","   let state =getState()\n",'   console.log("count is  : ",state.count);\n',"            \n"],lang:"js"}),o.a.createElement(p.a,{variant:"h4",className:"textTitle"},"Directory structure"),o.a.createElement(p.a,{className:e},"Actumjs impose almost no restriction on where your application store and actions are placed. however its good practice to have file organized in well defined structure.",o.a.createElement("br",null),"Actumjs specify following directory structure",o.a.createElement("br",null),o.a.createElement("br",null),"\xa0\xa0|--src",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0|---store",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/index.js",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0|---actions",o.a.createElement("br",null),"\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/index.js"),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/get-started"},o.a.createElement(J.a,null),"Get started")),o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},"Examples",o.a.createElement(H.a,null)))))))},window.addEventListener("resize",a.update),a.state={update:!1,open:!1},a}return Object(c.a)(n,[{key:"render",value:function(){var e=null,t=0;return window.screen.width<=768?(e=this.mobileView(),t="36px"):(e=this.normalView(),t="70px"),o.a.createElement("div",{style:{marginTop:t,color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),K=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).update=function(){a.mounted&&a.setState({update:!a.state.update})},a.renderReferenceLink=function(){return o.a.createElement("ul",null,[{title:"Using with Reactjs",link:"basic-react-example"},{title:"Using with Vuejs",link:"basic-vue-example"},{title:"Todo App with Reactjs",link:"todo-app-with-react-example"},{title:"Todo App With Vuejs",link:"todo-app-with-vue-example"}].map((function(e,t){return o.a.createElement("li",{key:t},o.a.createElement("a",{href:e.link},e.title))})))},a.mobileView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription",t=a.renderReferenceLink();return o.a.createElement(o.a.Fragment,null,o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Examples"),o.a.createElement(p.a,{component:"div",className:e},"In this sections we will describe examples using Actumjs with popular front-end libraries/frameworks like Reactjs and vuejs.",o.a.createElement("br",null),"We will build example apps for describing basic uses, a todo app , and working with async ajax calls.",o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"Reference Links"),o.a.createElement("div",null,t)),o.a.createElement(j.a,{container:!0,justify:"space-between"},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/api"},o.a.createElement(J.a,null),"Api")),o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/basic-react-example"},"Basic React example",o.a.createElement(H.a,null)))))},a.normalView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription",t=a.renderReferenceLink();return o.a.createElement(o.a.Fragment,null,o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Examples"),o.a.createElement(p.a,{component:"div",className:e},"In this sections we will describe examples using Actumjs with popular front-end libraries/frameworks like Reactjs and vuejs.",o.a.createElement("br",null),"We will build example apps for describing basic uses, a todo app , and working with async ajax calls.",o.a.createElement("br",null),o.a.createElement("br",null),o.a.createElement("b",null,"Reference Links"),o.a.createElement("div",null,t)),o.a.createElement(j.a,{container:!0,justify:"space-between"},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/api"},o.a.createElement(J.a,null),"Api")),o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/basic-react-example"},"Basic React example",o.a.createElement(H.a,null)))))},window.addEventListener("resize",a.update),a.state={update:!1},a.mounted=!1,a}return Object(c.a)(n,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){return window.screen.width<=768?this.mobileView():this.normalView()}}]),n}(o.a.Component),X=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).handleSrceenResize=function(){a.setState({update:!a.state.update,open:!1})},a.toggleDrawer=function(){a.setState({open:!a.state.open})},a.getCurrentPage=function(){return o.a.createElement(K,null)},a.mobileView=function(){var e=a.getCurrentPage();return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{style:{padding:"10px",marginTop:"20px"}},e))},a.normalView=function(){var e=a.getCurrentPage();return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"150px",paddingRight:"150px"}},e)))},a.state={open:!1,update:!1},window.addEventListener("resize",a.handleSrceenResize),a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),Z=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).update=function(){a.setState({update:!a.state.update})},a.normalView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"100px",paddingRight:"100px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Counter example using Reactjs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"In this section we will see how to make use of Actumjs to create a simple counter app with Reactjs.",o.a.createElement("br",null),"First , we need to create a new Reactjs app. This can be done by using create-react-app."),o.a.createElement($,{lines:["$ npx create-react-app counter_app"]}),o.a.createElement(p.a,{className:e},"After that we need to install Actumjs to our project."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Now we will describe our application state as store in src/store/index.js file"),o.a.createElement($,{lang:"js",lines:["\n    import {createStore} from '@actumjs/actum';\n    const initialState = {count:0};\n    const store = createStore(initialState);\n    export default store;"]}),o.a.createElement(p.a,{className:e},"To manipulate data within store we need to define actions that modity the store in seperate file  `src\\actions\\index.js`"),o.a.createElement($,{lang:"js",lines:["\n    //an action to increment counter value\n    export function increment(payload,state){\n        state.count++;\n    }\n    //an action to decrement counter value\n    export function   decrement(payload,state){\n        state.count--;\n    }\n                     "]}),o.a.createElement(p.a,{className:e},"All actions are required to be added into store to update it. After adding actions to store our src/store/index.js file will look something like this"),o.a.createElement($,{lang:"js",lines:["\n    import {createStore} from '@actumjs/actum';\n    import {increment,decrement} from '../actions'\n\n    const initialState = {count:0};\n    const store = createStore(initialState);\n\n    //adding actions to store\n    store.addAction(\"increment\",increment);\n    store.addAction(\"decrement\",decrement);\n\n    export default store;"]}),o.a.createElement(p.a,{className:e},"Now our store is defined and actions are added to it,further we need to create our counter component in ./src/components/CounterComponent.js, which will display counter value from store and two buttons to increase and decrease counter value"),o.a.createElement($,{lang:"js",lines:["\n    import React from 'react';\n    import store from '../store';\n\n    class CounterComponent extends React.Component{\n        constructor(props){\n            super(props);\n        }\n\n    render(){\n\n        let counter = store.getState().count;\n\n        return <div>\n                counter : {counter}\n                <button>increase</button>\n                <button>decrease</button>\n            </div>\n        }\n    }\n\n    export default CounterComponent;\n"]}),o.a.createElement(p.a,{className:e},"Inorder to trigger an action we need to handle click events of buttons."),o.a.createElement($,{lang:"js",lines:["\n    import React from 'react';\n    import store from '../store';\n\n    class CounterComponent extends React.Component{\n        constructor(props){\n            super(props);\n        }\n\n    render(){\n\n        let counter = store.getState().count;\n\n        return <div>\n\n                counter : {counter}\n                <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\n                <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\n            </div>\n        }\n    }\n\n    export default CounterComponent;\n"]}),o.a.createElement(p.a,{className:e},"Now we need to reflect changes to component,to do this we need  to listen  actions and update the components. This can be done by adding listners to store actions and updating component state whenever listner called."),o.a.createElement($,{lang:"js",lines:['\n    import React from \'react\';\n    import store from \'../store\';\n\n    class CounterComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.state={\n                update:false\n            }\n            \n            this.RemoveIncrementListener=null;\n            this.RemoveDecrementListener=null;\n        }\n\n        componentDidMount(){\n            //add listeners \n            this.RemoveIncrementListener=store.after("increment",this.update);\n            this.RemoveDecrementListener=store.after("decrement",this.update);\n        }\n\n        componentWillUnmount(){\n            //remove all listeners to store\n            this.RemoveIncrementListener();\n            this.RemoveDecrementListener();\n        }\n\n        //this will cause re-render of component\n        update=()=>{this.setState({update:(!this.state.update)})}\n\n        render(){\n\n        let counter = store.getState().count;\n\n        return <div>\n\n                counter : {counter}\n                <button onClick={()=>{store.trigger("increment");}} >increase</button>\n                <button onClick={()=>{store.trigger("decrement");}} >decrease</button>\n            </div>\n        }\n    }\n\n    export default CounterComponent;\n']}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},a.mobileView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement("div",{style:{padding:"10px",margin:"20px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Counter example using Reactjs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"In this section we will see how to make use of Actumjs to create a simple counter app with Reactjs.",o.a.createElement("br",null),"First, we need to create a new Reactjs app. This can be done by using create-react-app."),o.a.createElement($,{lines:["$ npx create-react-app counter_app"]}),o.a.createElement(p.a,{className:e},"After that we need to install Actumjs to our project."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Now we will describe our application state as store in src/store/index.js file"),o.a.createElement($,{lang:"js",lines:["\n    import {createStore} from '@actumjs/actum';\n    const initialState = {count:0};\n    const store = createStore(initialState);\n    export default store;\n"]}),o.a.createElement(p.a,{className:e},"To manipulate data within store we need to define actions that modity the store in seperate file  `src\\actions\\index.js`"),o.a.createElement($,{lang:"js",lines:["\n    //an action to increment counter value\n    export function increment(payload,state){\n        state.count++;\n    }\n    //an action to decrement counter value\n    export function   decrement(payload,state){\n        state.count--;\n    }"]}),o.a.createElement(p.a,{className:e},"All actions are required to be added into store to update it. After adding actions to store our src/store/index.js file will look something like this"),o.a.createElement($,{lang:"js",lines:['\n    import {createStore} from \'@actumjs/actum\';\n    import {increment,decrement} from \'../actions\n    const initialState = {count:0};\n    const store = createStore(initialState);\n    //adding actions to store\n    store.addAction("increment",increment);\n    store.addAction("decrement",decrement);\n    export default store;']}),o.a.createElement(p.a,{className:e},"Now our store is defined and actions are added to it,further we need to create our counter component in ./src/components/CounterComponent.js, which will display counter value from store and two buttons to increase and decrease counter value"),o.a.createElement($,{lang:"js",lines:["\n    import React from 'react';\n    import store from '../store';\n\n    class CounterComponent extends React.Component{\n        constructor(props){\n            super(props);\n        }\n\n    render(){\n\n    let counter = store.getState().count;\n\n    return <div>\n\n        counter : {counter}\n        <button>increase</button>\n        <button>decrease</button>\n\n    </div>\n    }\n    }\n\n    export default CounterComponent;\n"]}),o.a.createElement(p.a,{className:e},"Inorder to trigger an action we need to handle click events of buttons."),o.a.createElement($,{lang:"js",lines:["\n    import React from 'react';\n    import store from '../store';\n\n    class CounterComponent extends React.Component{\n        constructor(props){\n            super(props);\n        }\n\n\n    render(){\n\n    let counter = store.getState().count;\n\n    return <div>\n\n        counter : {counter}\n        <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\n        <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\n    </div>\n    }\n    }\n\n    export default CounterComponent;\n"]}),o.a.createElement(p.a,{className:e},"Now we need to reflect changes to component,to do this we need  to listen  actions and update the components. This can be done by adding listners to store actions and updating component state whenever listner called."),o.a.createElement($,{lang:"js",lines:['\n    import React from \'react\';\n    import store from \'../store\';\n\n    class CounterComponent extends React.Component{\n\n    constructor(props){\n            super(props);\n            this.state={\n                update:false\n            }\n        this.RemoveIncrementListener=null;\n        this.RemoveDecrementListener=null;\n    }\n\n    componentDidMount(){\n    //add listeners \n    this.RemoveIncrementListener=store.after("increment",this.update);\n    this.RemoveDecrementListener=store.after("decrement",this.update);\n    }\n\n    componentWillUnmount(){\n    //remove all listeners to store\n    this.RemoveIncrementListener();\n    this.RemoveDecrementListener();\n    }\n\n\n\n    //this will cause re-render of component\n    update=()=>{this.setState({update:(!this.state.update)})}\n\n    render(){\n\n    let counter = store.getState().count;\n\n    return <div>\n\n        counter : {counter}\n        <button onClick={()=>{store.trigger("increment");}} >increase</button>\n        <button onClick={()=>{store.trigger("decrement");}} >decrease</button>\n    </div>\n    }\n    }\n\n    export default CounterComponent;\n']}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},window.addEventListener("resize",a.update),a.state={update:!1},a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),ee=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).update=function(){a.setState({update:!a.state.update})},a.normalView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"100px",paddingRight:"100px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Counter example using Vuejs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"In this section we will see how to make use of Actumjs to create a simple counter app with Vuejs.",o.a.createElement("br",null),"First ,we need to create a new vuejs app. This can be done by using vue CLI."),o.a.createElement($,{lines:["$ vue create counter_app"]}),o.a.createElement(p.a,{className:e},"After that you need to install Actumjs to your project by using npm."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Now we will describe our application state as store in src/store/index.js file"),o.a.createElement($,{lang:"js",lines:["import {createStore} from '@actumjs/actum';\n","const initialState = { count:0 };\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"To manipulate data within store we need to define actions that modity the store in seperate file  `src\\actions\\index.js`"),o.a.createElement($,{lang:"js",lines:["\n    //an action to increment counter value\n    export function increment(payload,state){\n        state.count++;\n     }\n     //an action to decrement counter value\n    export function decrement(payload,state){\n        state.count--;\n     }\n \n"]}),o.a.createElement(p.a,{className:e},"All actions are required to be added into store to update it. After adding actions to store our src/store/index.js file will look something like this"),o.a.createElement($,{lang:"js",lines:["import {createStore} from '@actumjs/actum';\n","import {increment,decrement} from '../actions'\n\n","const initialState = { count:0 };\n","const store = createStore(initialState);\n\n","//adding actions to store\n",'store.addAction("increment",increment);\n','store.addAction("decrement",decrement);\n\n',"export default store;\n"]}),o.a.createElement(p.a,{className:e},"Now our store is defined and actions are added to it,further we need to create our counter compoents in src/components/counter.vue, which will display counter value from store and two buttons to increase and decrease counter value."),o.a.createElement($,{lang:"js",lines:["\n                <template>\n                     <div>\n                         <input type='text' :value=\"count\"/>\n                         <button >increment</button>\n                         <button >decrement</button>\n                     </div>\n                </template>\n                <script>\n                 import store from '../store'\n                 \n                 export default {\n                     name:'counter',\n                     data:function() {\n                         let {count}=store.getState()\n                         return {\n                             count:count,\n                         }\n                     }\n                 }\n                 <\/script>\n\n"]}),o.a.createElement(p.a,{className:e},"Inorder to trigger an action we need to handle click events of buttons. so we will need to define methods and attach them to our buttons"),o.a.createElement($,{lang:"js",lines:['\n                <template>\n                     <div>\n                         <input type=\'text\' :value="count"/>\n                         <button @click="increment">increment</button>\n                         <button @click="decrement">decrement</button>\n                     </div>\n                 </template>\n                 <script>\n                 import store from \'../store\'\n                 \n                 export default {\n                     name:\'counter\',\n                     data:function() {\n                         let {count}=store.getState()\n                         return {\n                             count:count,\n                         }\n                     },\n                     mounted:function(){\n                         store.after("increment",this.update)\n                         store.after("decrement",this.update)\n                     },\n                     methods:{\n                         increment:function(){ store.trigger("increment");},\n                         decrement:function(){ store.trigger("decrement");},\n                         update:function(){\n                             let {count}=store.getState();\n                             this.count=count;\n                         }\n                     }\n                 }\n                 <\/script>\n']}),o.a.createElement(p.a,{className:e},"Finally we need to render that compoent in our App.vue file as shown below"),o.a.createElement($,{lang:"js",lines:["\n                   <template>\n                     <div id=\"app\">\n                      <counter />\n                     </div>\n                   </template>\n                   \n                   <script>\n                   import counter from './components/counter'\n                   export default {\n                     name: 'App',\n                     components:{\n                       counter:counter\n                     }\n                   }\n                   <\/script>\n                   "]}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},a.mobileView=function(){var e=window.screen.width<=768?"textDescriptionMobile":"textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:12,lg:12},o.a.createElement("div",{style:{padding:"5px",margin:"20px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Counter example using Vuejs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"In this section we will see how to make use of Actumjs to create a simple counter app with Vuejs.",o.a.createElement("br",null),"First ,we need to create a new vuejs app. This can be done by using vue CLI."),o.a.createElement($,{lines:["$ vue create counter_app"]}),o.a.createElement(p.a,{className:e},"After that you need to install Actumjs to your project by using npm."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Now we will describe our application state as store in src/store/index.js file"),o.a.createElement($,{lang:"js",lines:["import {createStore} from '@actumjs/actum';\n","const initialState = { count:0 };\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"To manipulate data within store we need to define actions that modity the store in seperate file  `src\\actions\\index.js`"),o.a.createElement($,{lang:"js",lines:["\n    //an action to increment counter value\n    export function increment(payload,state){\n        state.count++;\n     }\n     //an action to decrement counter value\n    export function decrement(payload,state){\n        state.count--;\n     }\n \n"]}),o.a.createElement(p.a,{className:e},"All actions are required to be added into store to update it. After adding actions to store our src/store/index.js file will look something like this"),o.a.createElement($,{lang:"js",lines:["import {createStore} from '@actumjs/actum';\n","import {increment,decrement} from '../actions'\n\n","const initialState = { count:0 };\n","const store = createStore(initialState);\n\n","//adding actions to store\n",'store.addAction("increment",increment);\n','store.addAction("decrement",decrement);\n\n',"export default store;\n"]}),o.a.createElement(p.a,{className:e},"Now our store is defined and actions are added to it,further we need to create our counter compoents in src/components/counter.vue, which will display counter value from store and two buttons to increase and decrease counter value."),o.a.createElement($,{lang:"js",lines:["\n        <template>\n             <div>\n                 <input type='text' :value=\"count\"/>\n                 <button >increment</button>\n                 <button >decrement</button>\n             </div>\n        </template>\n        <script>\n         import store from '../store'\n         \n         export default {\n             name:'counter',\n             data:function() {\n                 let {count}=store.getState()\n                 return {\n                     count:count,\n                 }\n             }\n         }\n         <\/script>\n\n"]}),o.a.createElement(p.a,{className:e},"Inorder to trigger an action we need to handle click events of buttons. so we will need to define methods and attach them to our buttons"),o.a.createElement($,{lang:"js",lines:['\n        <template>\n             <div>\n                 <input type=\'text\' :value="count"/>\n                 <button @click="increment">increment</button>\n                 <button @click="decrement">decrement</button>\n             </div>\n         </template>\n         <script>\n         import store from \'../store\'\n         \n         export default {\n             name:\'counter\',\n             data:function() {\n                 let {count}=store.getState()\n                 return {\n                     count:count,\n                 }\n             },\n             mounted:function(){\n                 store.after("increment",this.update)\n                 store.after("decrement",this.update)\n             },\n             methods:{\n                 increment:function(){ store.trigger("increment");},\n                 decrement:function(){ store.trigger("decrement");},\n                 update:function(){\n                     let {count}=store.getState();\n                     this.count=count;\n                 }\n             }\n         }\n         <\/script>\n']}),o.a.createElement(p.a,{className:e},"Finally we need to render that compoent in our App.vue file as shown below"),o.a.createElement($,{lang:"js",lines:["\n           <template>\n             <div id=\"app\">\n              <counter />\n             </div>\n           </template>\n           \n           <script>\n           import counter from './components/counter'\n           export default {\n             name: 'App',\n             components:{\n               counter:counter\n             }\n           }\n           <\/script>\n           "]}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},window.addEventListener("resize",a.update),a.state={update:!1},a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),te=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).update=function(){a.setState({update:!a.state.update})},a.normalView=function(){var e="textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"100px",paddingRight:"100px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Todo App example using Reactjs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Here in this section we will build a todo app using actumjs with Reactjs.",o.a.createElement("br",null),"First thing you need to do is creating a new reactjs app using `create-react-app` CLI."),o.a.createElement($,{lines:["$ npx create-react-app todo_app"]}),o.a.createElement(p.a,{className:e},"Once your project is created using `create-react-app`,Now we need to install Actumjs."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .",o.a.createElement("br",null),"Import `createStore` from the Actumjs package and create the store using it as shown below."),o.a.createElement($,{lang:"js",lines:["// File : src/store/index.js \n","import {createStore} from '@actumjs/actum';\n","const initialState = {todos:[]};\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside todo_app/src.",o.a.createElement("br",null),"Describe the actions as show below"),o.a.createElement($,{lang:"js",lines:["// File : src/actions/index.js\n","export function addTodo(payload,state){\n","    let todos = state.todos;\n","    let id=1;\n","    if(todos.length>0){\n","        id = todos[todos.length-1].id+1;\n","    }\n","    todos.push({id:id,description:payload});\n","}\n","\n","export function updateTodo(payload,state){\n","    let todos = state.todos;\n","    let editedTodo=todos.find(function(todo){return todo.id==payload.id});\n","    if(editedTodo!==undefined){\n","        editedTodo.todo=payload.todo;\n","    }\n","}\n","\n","export function deleteTodo(payload,state){\n","    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\n","}\n"]}),o.a.createElement(p.a,{className:e},"At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object."),o.a.createElement($,{lang:"js",lines:['\n//File : src/store/index.js\nimport {createStore} from \'@actumjs/actum\';\nimport { addTodo, updateTodo, deleteTodo } from \'../actions\'\n\nlet initialState = { todos: [] }\n\nlet store = createStore(initialState);\n\nstore.addAction("addTodo", addTodo);\nstore.addAction("updateTodo", updateTodo);\nstore.addAction("deleteTodo", deleteTodo);\n\nexport default store;\n            ']}),o.a.createElement(p.a,{className:e},"Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below"),o.a.createElement($,{lang:"js",lines:['\n//File :  src/components/AddTodo.js\nimport React from \'react\'\nimport store from \'../store\'\nexport default class AddTodo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            errorMessage:\'\',\n            description:\'\'\n        }\n    }\n    addTodo=()=>{\n        if(this.state.description==""){\n            this.setState({\n                errorMessage:"Please enter description"\n            })\n        }else{\n            //trigger the action\n            store.trigger("addTodo",this.state.description);\n            //clear the state\n            this.setState({errorMessage:\'\',description:\'\'});\n        }\n        \n    }\n    handleInput=(name,value)=>{\n        let curState=this.state;\n        curState[name]=value;\n        this.setState(curState);\n    }\n    render() {\n        return <>\n            <div className="container">\n                <div className="row">\n                    <div className="col-md-6">\n                        <span className="text-danger text-left">{ this.state.errorMessage }</span>\n                    </div>\n                </div>\n                <div className="row">\n                    <div className="col-md-6 input-group">\n                        <input className="form-control" placeholder="Enter Todo here" value={this.state.description} onChange={(e)=>{this.handleInput("description",e.target.value)}}/>\n                        <button className="btn btn-primary" onClick={this.addTodo}>Add</button>\n                    </div>\n                </div>\n            </div>\n        </>\n\n    }\n}\n']}),o.a.createElement(p.a,{className:e},"After having component to add todos ,Let's have List and ListItem component to show todo items."),o.a.createElement($,{lang:"js",lines:['\n//File : src/components/ListItem.js\nimport React from \'react\'\nimport store from \'../store\';\nexport default class ListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            curTodo: props.todo\n        }\n    }\n\n    deleteTodo = () => {\n        store.trigger("deleteTodo", this.state.curTodo);\n    }\n    doEdit = () => {\n        this.setState({ isEditing: true })\n    }\n    cancelEditing = () => {\n        this.setState({ isEditing: false })\n    }\n    save = () => {\n        store.trigger("updateTodo", this.state.curTodo);\n        this.setState({ isEditing: false })\n    }\n    handleInput = (value) => {\n        let curTodo = this.state.curTodo;\n        curTodo.description = value;\n        this.setState({\n            curTodo: curTodo\n        })\n    }\n\n    render() {\n        if (this.state.isEditing) {\n            return <>\n                <div className="row" style={{ marginTop: "10px" }}>\n                    <div className="col-md-2">{this.state.curTodo.id}</div>\n                    <div className="col-md-2">\n                        <input type="text" className="form-control" value={this.state.curTodo.description} onChange={(e) => { this.handleInput(e.target.value) }} />\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-primary" onClick={this.save}>Save</button>\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-danger" onClick={this.cancelEditing}>Cancel</button>\n                    </div>\n                </div>\n            </>\n        } else {\n            return <>\n                <div className="row" style={{ marginTop: "10px" }}>\n                    <div className="col-md-2">{this.props.todo.id}</div>\n                    <div className="col-md-2">{this.props.todo.description}</div>\n                    <div className="col-md-1">\n                        <button className="btn btn-info" onClick={this.doEdit}>Edit</button>\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-secondary" onClick={this.deleteTodo}>Delete</button>\n                    </div>\n                </div>\n            </>\n        }\n\n    }\n}\n             ']}),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.js\nimport React from \'react\'\nimport store from \'../store\';\nimport ListItem from \'./ListItem\';\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    getContent = () => {\n        let todos = store.getState().todos;\n        if (todos.length <= 0) {\n            return <div className="row" style={{marginTop:"10px"}}><div className="col-md-6" ><h5>No todos to show</h5></div></div>\n        }\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\n    }\n    render() {\n        let content = this.getContent();\n        return <div className="container">\n                    {content}\n            </div>\n    }\n}\n']}),o.a.createElement(p.a,{className:e},"Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component, Inorder to do this we will attach listeners to store actions."),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.js\n\nimport React from \'react\'\nimport store from \'../store\';\nimport ListItem from \'./ListItem\';\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { update: false }\n    }\n    componentDidMount(){\n        //add listeners to actions\n        this.afterAddTodo = store.after("addTodo", this.update);\n        this.afterdeleteTodo = store.after("deleteTodo", this.update);\n        this.aftereditTodo = store.after("updateTodo", this.update);\n    }\n    componentWillUnmount(){\n        //remove listeners \n        this.afterAddTodo();\n        this.afterdeleteTodo();\n        this.aftereditTodo();\n    }\n    update = () => {\n        this.setState({ update: !this.state.update })\n    }\n    getContent = () => {\n        let todos = store.getState().todos;\n        if (todos.length <= 0) {\n            return <div className="row" style={{marginTop:"10px"}}><div className="col-md-6" ><h5>No todos to show</h5></div></div>\n        }\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\n    }\n    render() {\n        let content = this.getContent();\n        return <div className="container">\n                    {content}\n            </div>\n    }\n}\n           ']}),o.a.createElement(p.a,{className:e+" devtip"},"Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners? In this case action listeners will be called to update state of component which is not mounted."),o.a.createElement(p.a,{className:e},"Finally we will place all component inside our app component."),o.a.createElement($,{lang:"js",lines:["\n//File : src/App.js\nimport React from 'react'\nimport AddTodo from './components/AddTodo';\nimport List from './components/List';\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h1>Todos</h1>\n                </div>\n                <AddTodo />\n                <List />\n            </div>\n\n        </>\n\n    }\n}\n"]}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},a.mobileView=function(){var e="textDescriptionMobile";return o.a.createElement("div",{style:{padding:"10px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Todo App example using Reactjs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Here in this section we will build a todo app using actumjs with Reactjs.",o.a.createElement("br",null),"First thing you need to do is creating a new reactjs app using `create-react-app` CLI,If you don't have it on your system you can install it using npm."),o.a.createElement($,{lines:["$ npx create-react-app todo_app"]}),o.a.createElement(p.a,{className:e},"Once your project is created using `create-react-app`,Now we need to install Actumjs."),o.a.createElement($,{lines:["$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .",o.a.createElement("br",null),"Import `createStore` from the Actumjs package and create the store using it as shown below."),o.a.createElement($,{lang:"js",lines:["// File : src/store/index.js \n","import {createStore} from '@actumjs/actum';\n","const initialState = {todos:[]};\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside todo_app/src.",o.a.createElement("br",null),"Describe the actions as show below"),o.a.createElement($,{lang:"js",lines:["// File : src/actions/index.js\n","export function addTodo(payload,state){\n","    let todos = state.todos;\n","    let id=1;\n","    if(todos.length>0){\n","        id = todos[todos.length-1].id+1;\n","    }\n","    todos.push({id:id,description:payload});\n","}\n","\n","export function updateTodo(payload,state){\n","    let todos = state.todos;\n","    let editedTodo=todos.find(function(todo){return todo.id==payload.id});\n","    if(editedTodo!==undefined){\n","        editedTodo.todo=payload.todo;\n","    }\n","}\n","\n","export function deleteTodo(payload,state){\n","    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\n","}\n"]}),o.a.createElement(p.a,{className:e},"At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object."),o.a.createElement($,{lang:"js",lines:['\n//File : src/store/index.js\nimport {createStore} from \'@actumjs/actum\';\nimport { addTodo, updateTodo, deleteTodo } from \'../actions\'\n\nlet initialState = { todos: [] }\n\nlet store = createStore(initialState);\n\nstore.addAction("addTodo", addTodo);\nstore.addAction("updateTodo", updateTodo);\nstore.addAction("deleteTodo", deleteTodo);\n\nexport default store;\n            ']}),o.a.createElement(p.a,{className:e},"Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below"),o.a.createElement($,{lang:"js",lines:['\n//File :  src/components/AddTodo.js\nimport React from \'react\'\nimport store from \'../store\'\nexport default class AddTodo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            errorMessage:\'\',\n            description:\'\'\n        }\n    }\n    addTodo=()=>{\n        if(this.state.description==""){\n            this.setState({\n                errorMessage:"Please enter description"\n            })\n        }else{\n            //trigger the action\n            store.trigger("addTodo",this.state.description);\n            //clear the state\n            this.setState({errorMessage:\'\',description:\'\'});\n        }\n        \n    }\n    handleInput=(name,value)=>{\n        let curState=this.state;\n        curState[name]=value;\n        this.setState(curState);\n    }\n    render() {\n        return <>\n            <div className="container">\n                <div className="row">\n                    <div className="col-md-6">\n                        <span className="text-danger text-left">{ this.state.errorMessage }</span>\n                    </div>\n                </div>\n                <div className="row">\n                    <div className="col-md-6 input-group">\n                        <input className="form-control" placeholder="Enter Todo here" value={this.state.description} onChange={(e)=>{this.handleInput("description",e.target.value)}}/>\n                        <button className="btn btn-primary" onClick={this.addTodo}>Add</button>\n                    </div>\n                </div>\n            </div>\n        </>\n\n    }\n}\n']}),o.a.createElement(p.a,{className:e},"After having component to add todos ,Let's have List and ListItem component to show todo items."),o.a.createElement($,{lang:"js",lines:['\n//File : src/components/ListItem.js\nimport React from \'react\'\nimport store from \'../store\';\nexport default class ListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            curTodo: props.todo\n        }\n    }\n\n    deleteTodo = () => {\n        store.trigger("deleteTodo", this.state.curTodo);\n    }\n    doEdit = () => {\n        this.setState({ isEditing: true })\n    }\n    cancelEditing = () => {\n        this.setState({ isEditing: false })\n    }\n    save = () => {\n        store.trigger("updateTodo", this.state.curTodo);\n        this.setState({ isEditing: false })\n    }\n    handleInput = (value) => {\n        let curTodo = this.state.curTodo;\n        curTodo.description = value;\n        this.setState({\n            curTodo: curTodo\n        })\n    }\n\n    render() {\n        if (this.state.isEditing) {\n            return <>\n                <div className="row" style={{ marginTop: "10px" }}>\n                    <div className="col-md-2">{this.state.curTodo.id}</div>\n                    <div className="col-md-2">\n                        <input type="text" className="form-control" value={this.state.curTodo.description} onChange={(e) => { this.handleInput(e.target.value) }} />\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-primary" onClick={this.save}>Save</button>\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-danger" onClick={this.cancelEditing}>Cancel</button>\n                    </div>\n                </div>\n            </>\n        } else {\n            return <>\n                <div className="row" style={{ marginTop: "10px" }}>\n                    <div className="col-md-2">{this.props.todo.id}</div>\n                    <div className="col-md-2">{this.props.todo.description}</div>\n                    <div className="col-md-1">\n                        <button className="btn btn-info" onClick={this.doEdit}>Edit</button>\n                    </div>\n                    <div className="col-md-1">\n                        <button className="btn btn-secondary" onClick={this.deleteTodo}>Delete</button>\n                    </div>\n                </div>\n            </>\n        }\n\n    }\n}\n             ']}),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.js\nimport React from \'react\'\nimport store from \'../store\';\nimport ListItem from \'./ListItem\';\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    getContent = () => {\n        let todos = store.getState().todos;\n        if (todos.length <= 0) {\n            return <div className="row" style={{marginTop:"10px"}}><div className="col-md-6" ><h5>No todos to show</h5></div></div>\n        }\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\n    }\n    render() {\n        let content = this.getContent();\n        return <div className="container">\n                    {content}\n            </div>\n    }\n}\n']}),o.a.createElement(p.a,{className:e},"Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component, Inorder to do this we will attach listeners to store actions."),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.js\n\nimport React from \'react\'\nimport store from \'../store\';\nimport ListItem from \'./ListItem\';\nexport default class List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { update: false }\n    }\n    componentDidMount(){\n        //add listeners to actions\n        this.afterAddTodo = store.after("addTodo", this.update);\n        this.afterdeleteTodo = store.after("deleteTodo", this.update);\n        this.aftereditTodo = store.after("updateTodo", this.update);\n    }\n    componentWillUnmount(){\n        //remove listeners \n        this.afterAddTodo();\n        this.afterdeleteTodo();\n        this.aftereditTodo();\n    }\n    update = () => {\n        this.setState({ update: !this.state.update })\n    }\n    getContent = () => {\n        let todos = store.getState().todos;\n        if (todos.length <= 0) {\n            return <div className="row" style={{marginTop:"10px"}}><div className="col-md-6" ><h5>No todos to show</h5></div></div>\n        }\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\n    }\n    render() {\n        let content = this.getContent();\n        return <div className="container">\n                    {content}\n            </div>\n    }\n}\n           ']}),o.a.createElement(p.a,{className:e+" devtip"},"Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners? In this case action listeners will be called to update state of component which is not mounted."),o.a.createElement(p.a,{className:e},"Finally we will place all component inside our app component."),o.a.createElement($,{lang:"js",lines:["\n//File : src/App.js\nimport React from 'react'\nimport AddTodo from './components/AddTodo';\nimport List from './components/List';\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h1>Todos</h1>\n                </div>\n                <AddTodo />\n                <List />\n            </div>\n\n        </>\n\n    }\n}\n"]}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))},window.addEventListener("resize",a.update),a.state={update:!1},a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),ne=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).update=function(){a.setState({update:!a.state.update})},a.normalView=function(){var e="textDescription";return o.a.createElement(j.a,{container:!0,justify:"center"},o.a.createElement(j.a,{item:!0,md:10,lg:10},o.a.createElement(F.a,{style:{padding:"20px",margin:"20px",paddingLeft:"100px",paddingRight:"100px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Todo App example using Vuejs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Here in this section we will build a todo app using Actumjs with Vuejs.",o.a.createElement("br",null),"First thing you need to do is creating a new vue app using `vue` CLI."),o.a.createElement($,{lines:["$ vue create todo_app"]}),o.a.createElement(p.a,{className:e},"Once your project is created ,Now we need to install Actumjs."),o.a.createElement($,{lines:["$ cd todo_app","\n$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .",o.a.createElement("br",null),"Import `createStore` from the Actumjs package and create the store using it as shown below."),o.a.createElement($,{lang:"js",lines:["// File : src/store/index.js \n","import {createStore} from '@actumjs/actum';\n","const initialState = {todos:[]}\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside todo_app/src.",o.a.createElement("br",null),"Finally describe the actions as show below"),o.a.createElement($,{lang:"js",lines:["// File : src/actions/index.js\n","export function addTodo(payload,state){\n","let todos = state.todos;","    let id=1;\n","    if(todos.length>0){\n","        id=todos[todos.length-1].id+1;\n","    }\n","    todos.push({id:id,description:payload});\n","}\n","\n","export function updateTodo(payload,state){\n","let todos = state.todos;","    let editedtodo=todos.find(function(todo){return todo.id==payload.id});\n","    if(editedtodo!==undefined){\n","        editedtodo.todo=payload.todo;\n","    }\n","}\n","\n","export function deleteTodo(payload,state){\n","    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\n","}\n"]}),o.a.createElement(p.a,{className:e},"At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object."),o.a.createElement($,{lang:"js",lines:['\n//File : src/store/index.js\nimport {createStore} from \'@actumjs/actum\';\nimport { addTodo, updateTodo, deleteTodo } from \'../actions\'\n\nlet initialState = { todos: [] }\n\nlet store = createStore(initialState);\n\nstore.addAction("addTodo", addTodo);\nstore.addAction("updateTodo", updateTodo);\nstore.addAction("deleteTodo", deleteTodo);\n\nexport default store;\n            ']}),o.a.createElement(p.a,{className:e},"Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below"),o.a.createElement($,{lang:"js",lines:['\n//File :  src/components/AddTodo.vue\n<template>\n  <div class="container">\n    <div class="row">\n      <div class="col-md-6">\n        <span v-if="error" class="text-danger text-left">{{errorMessage}}</span>\n      </div>\n    </div>\n    <div class="row">\n      <div class="col-md-6 input-group">\n        <input class="form-control" placeholder="Enter Todo here" v-model="description" />\n        <button class="btn btn-primary" @click="addTodo">Add</button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport store from "../store";\nexport default {\n  name: "AddTodo",\n  data: function() {\n    return { description: "", error: false, errorMessage: "" };\n  },\n  methods: {\n    addTodo: function() {\n      if (this.description == "") {\n        this.error = true;\n        this.errorMessage = "Please enter description";\n      } else {\n        store.trigger("addTodo", this.description);\n        this.description = "";\n        this.error = false;\n        this.errorMessage = "";\n      }\n    }\n  }\n};\n<\/script>\n']}),o.a.createElement(p.a,{className:e},"After having Component to add todos ,Let's have List and ListItem component to show todo items"),o.a.createElement(p.a,{className:e},"ListItem.vue"),o.a.createElement($,{lang:"js",lines:['\n//File : src/components/ListItem.vue\n<template>\n  <div>\n    <div v-if="isEditing" class="row" style="margin-top:10px">\n      <div class="col-md-2">{{todo.id}}</div>\n      <div class="col-md-2">\n        <input type="text" class="form-control" v-model="curTodo.description" />\n      </div>\n      <div class="col-md-1">\n        <button class="btn btn-primary" @click="save">Save</button>\n      </div>\n      <div class="col-md-1">\n        <button class="btn btn-danger" @click="cancelEditing">Cancel</button>\n      </div>\n    </div>\n    <div v-if="!isEditing" class="row" style="margin-top:10px">\n      <div class="col-md-2">{{todo.id}}</div>\n      <div class="col-md-2">{{todo.description}}</div>\n      <div class="col-md-1">\n        <button class="btn btn-info" @click="doEdit">Edit</button>\n      </div>\n      <div class="col-md-1">\n        <button class="btn btn-secondary" @click="deleteTodo">Delete</button>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport store from "../store";\nexport default {\n  name: "ListItem",\n  props: ["todo"],\n  methods: {\n    deleteTodo: function() {\n      store.trigger("deleteTodo", this.curTodo);\n    },\n    doEdit: function() {\n      this.isEditing = true;\n    },\n    cancelEditing: function() {\n      this.isEditing = false;\n    },\n    save: function() {\n      store.trigger("updateTodo", this.curTodo);\n      this.isEditing = false;\n    }\n  },\n  data: function() {\n    return {\n      isEditing: false,\n      curTodo: this.todo\n    };\n  }\n};\n<\/script>\n             ']}),o.a.createElement(p.a,{className:e},"List.vue"),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.vue\n<template>\n  <div class="container">\n    <ListItem v-for="todo in todos" :todo="todo" :key="todo.id" />\n    <div class="row" v-if="todos.length<=0">\n      <div class="col-md-6" style="margin-top:10px">\n        <h5>No todos to show</h5>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport store from "../store";\nimport ListItem from "./ListItem";\nexport default {\n  name: "List",\n  data: function() {\n    return { todos: store.getState().todos };\n  },\n  components: {\n    ListItem\n  }\n};\n<\/script>\n']}),o.a.createElement(p.a,{className:e},"Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component, Inorder to do this we will attach listeners to store actions."),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.vue\n<template>\n  <div class="container">\n    <ListItem v-for="todo in todos" :todo="todo" :key="todo.id" />\n    <div class="row" v-if="todos.length<=0">\n      <div class="col-md-6" style="margin-top:10px">\n        <h5>No todos to show</h5>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport store from "../store";\nimport ListItem from "./ListItem";\nexport default {\n  name: "List",\n  methods: {\n    updateList: function() {\n      this.todos = store.getState().todos;\n    }\n  },\n  mounted: function() {\n    this.removeAddTodoListner    = store.after("addTodo", this.updateList);\n    this.removeUpdateTodoListner = store.after("updateTodo", this.updateList);\n    this.removeDeleteTodoListner = store.after("deleteTodo", this.updateList);\n  },\n  unmounted:function(){\n    this.removeAddTodoListner();    \n    this.removeUpdateTodoListner(); \n    this.removeDeleteTodoListner(); \n  },\n  data: function() {\n    return { todos: store.getState().todos };\n  },\n  components: {\n    ListItem\n  }\n};\n<\/script>\n           ']}),o.a.createElement(p.a,{className:e+" devtip"},"Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners? In this case action listeners will be called to update state of component which is not mounted."),o.a.createElement(p.a,{className:e},"Finally we will place all component inside our app component."),o.a.createElement($,{lang:"js",lines:['\n//File : src/App.vue\n<template>\n  <div class="container">\n    <div class="row">\n      <h1>Todos</h1>\n    </div>\n    <AddTodo />\n    <List />\n  </div>\n</template>\n<script>\nimport AddTodo from "./components/AddTodo";\nimport List from "./components/List";\nexport default {\n  name: "App",\n  components: {\n    AddTodo,\n    List\n  }\n};\n<\/script>\n']}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))))},a.mobileView=function(){var e="textDescriptionMobile";return o.a.createElement("div",{style:{margin:"10px"}},o.a.createElement(p.a,{className:"textTitle",variant:"h4"},"Todo App example using Vuejs"),o.a.createElement(U.a,null),o.a.createElement(p.a,{className:e},"Here in this section we will build a todo app using Actumjs with Vuejs.",o.a.createElement("br",null),"First thing you need to do is creating a new vue app using `vue` CLI."),o.a.createElement($,{lines:["$ vue create todo_app"]}),o.a.createElement(p.a,{className:e},"Once your project is created ,Now we need to install Actumjs."),o.a.createElement($,{lines:["$ cd todo_app","\n$ npm install  @actumjs/actum"]}),o.a.createElement(p.a,{className:e},"Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .",o.a.createElement("br",null),"Import `createStore` from the Actumjs package and create the store using it as shown below."),o.a.createElement($,{lang:"js",lines:["// File : src/store/index.js \n","import {createStore} from '@actumjs/actum';\n","const initialState = {todos:[]}\n","const store = createStore(initialState);\n","export default store;\n"]}),o.a.createElement(p.a,{className:e},"After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside todo_app/src.",o.a.createElement("br",null),"Finally describe the actions as show below"),o.a.createElement($,{lang:"js",lines:["// File : src/actions/index.js\n","export function addTodo(payload,state){\n","let todos = state.todos;","    let id=1;\n","    if(todos.length>0){\n","        id=todos[todos.length-1].id+1;\n","    }\n","    todos.push({id:id,description:payload});\n","}\n","\n","export function updateTodo(payload,state){\n","let todos = state.todos;","    let editedtodo=todos.find(function(todo){return todo.id==payload.id});\n","    if(editedtodo!==undefined){\n","        editedtodo.todo=payload.todo;\n","    }\n","}\n","\n","export function deleteTodo(payload,state){\n","    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\n","}\n"]}),o.a.createElement(p.a,{className:e},"At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object."),o.a.createElement($,{lang:"js",lines:['\n//File : src/store/index.js\nimport {createStore} from \'@actumjs/actum\';\nimport { addTodo, updateTodo, deleteTodo } from \'../actions\'\n\nlet initialState = { todos: [] }\n\nlet store = createStore(initialState);\n\nstore.addAction("addTodo", addTodo);\nstore.addAction("updateTodo", updateTodo);\nstore.addAction("deleteTodo", deleteTodo);\n\nexport default store;\n        ']}),o.a.createElement(p.a,{className:e},"Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below"),o.a.createElement($,{lang:"js",lines:['\n//File :  src/components/AddTodo.vue\n<template>\n<div class="container">\n<div class="row">\n  <div class="col-md-6">\n    <span v-if="error" class="text-danger text-left">{{errorMessage}}</span>\n  </div>\n</div>\n<div class="row">\n  <div class="col-md-6 input-group">\n    <input class="form-control" placeholder="Enter Todo here" v-model="description" />\n    <button class="btn btn-primary" @click="addTodo">Add</button>\n  </div>\n</div>\n</div>\n</template>\n<script>\nimport store from "../store";\nexport default {\nname: "AddTodo",\ndata: function() {\nreturn { description: "", error: false, errorMessage: "" };\n},\nmethods: {\naddTodo: function() {\n  if (this.description == "") {\n    this.error = true;\n    this.errorMessage = "Please enter description";\n  } else {\n    store.trigger("addTodo", this.description);\n    this.description = "";\n    this.error = false;\n    this.errorMessage = "";\n  }\n}\n}\n};\n<\/script>\n']}),o.a.createElement(p.a,{className:e},"After having Component to add todos ,Let's have List and ListItem component to show todo items"),o.a.createElement($,{lang:"js",lines:['\n//File : src/components/ListItem.vue\n<template>\n<div>\n<div v-if="isEditing" class="row" style="margin-top:10px">\n  <div class="col-md-2">{{todo.id}}</div>\n  <div class="col-md-2">\n    <input type="text" class="form-control" v-model="curTodo.description" />\n  </div>\n  <div class="col-md-1">\n    <button class="btn btn-primary" @click="save">Save</button>\n  </div>\n  <div class="col-md-1">\n    <button class="btn btn-danger" @click="cancelEditing">Cancel</button>\n  </div>\n</div>\n<div v-if="!isEditing" class="row" style="margin-top:10px">\n  <div class="col-md-2">{{todo.id}}</div>\n  <div class="col-md-2">{{todo.description}}</div>\n  <div class="col-md-1">\n    <button class="btn btn-info" @click="doEdit">Edit</button>\n  </div>\n  <div class="col-md-1">\n    <button class="btn btn-secondary" @click="deleteTodo">Delete</button>\n  </div>\n</div>\n</div>\n</template>\n<script>\nimport store from "../store";\nexport default {\nname: "ListItem",\nprops: ["todo"],\nmethods: {\ndeleteTodo: function() {\n  store.trigger("deleteTodo", this.curTodo);\n},\ndoEdit: function() {\n  this.isEditing = true;\n},\ncancelEditing: function() {\n  this.isEditing = false;\n},\nsave: function() {\n  store.trigger("updateTodo", this.curTodo);\n  this.isEditing = false;\n}\n},\ndata: function() {\nreturn {\n  isEditing: false,\n  curTodo: this.todo\n};\n}\n};\n<\/script>\n         ']}),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.vue\n<template>\n<div class="container">\n<ListItem v-for="todo in todos" :todo="todo" :key="todo.id" />\n<div class="row" v-if="todos.length<=0">\n  <div class="col-md-6" style="margin-top:10px">\n    <h5>No todos to show</h5>\n  </div>\n</div>\n</div>\n</template>\n<script>\nimport store from "../store";\nimport ListItem from "./ListItem";\nexport default {\nname: "List",\ndata: function() {\nreturn { todos: store.getState().todos };\n},\ncomponents: {\nListItem\n}\n};\n<\/script>\n']}),o.a.createElement(p.a,{className:e},"Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component, Inorder to do this we will attach listeners to store actions."),o.a.createElement($,{lang:"js",lines:['\n//File src/components/List.vue\n<template>\n<div class="container">\n<ListItem v-for="todo in todos" :todo="todo" :key="todo.id" />\n<div class="row" v-if="todos.length<=0">\n  <div class="col-md-6" style="margin-top:10px">\n    <h5>No todos to show</h5>\n  </div>\n</div>\n</div>\n</template>\n<script>\nimport store from "../store";\nimport ListItem from "./ListItem";\nexport default {\nname: "List",\nmethods: {\nupdateList: function() {\n  this.todos = store.getState().todos;\n}\n},\nmounted: function() {\nthis.removeAddTodoListner    = store.after("addTodo", this.updateList);\nthis.removeUpdateTodoListner = store.after("updateTodo", this.updateList);\nthis.removeDeleteTodoListner = store.after("deleteTodo", this.updateList);\n},\nunmounted:function(){\nthis.removeAddTodoListner();    \nthis.removeUpdateTodoListner(); \nthis.removeDeleteTodoListner(); \n},\ndata: function() {\nreturn { todos: store.getState().todos };\n},\ncomponents: {\nListItem\n}\n};\n<\/script>\n       ']}),o.a.createElement(p.a,{className:e+" devtip"},"Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners? In this case action listeners will be called to update state of component which is not mounted."),o.a.createElement(p.a,{className:e},"Finally we will place all component inside our app component."),o.a.createElement($,{lang:"js",lines:['\n//File : src/App.vue\n<template>\n<div class="container">\n<div class="row">\n  <h1>Todos</h1>\n</div>\n<AddTodo />\n<List />\n</div>\n</template>\n<script>\nimport AddTodo from "./components/AddTodo";\nimport List from "./components/List";\nexport default {\nname: "App",\ncomponents: {\nAddTodo,\nList\n}\n};\n<\/script>\n']}),o.a.createElement(j.a,{container:!0,justify:"space-between",style:{paddingBottom:"50px"}},o.a.createElement(j.a,{item:!0},o.a.createElement(q.a,{href:"/examples"},o.a.createElement(J.a,null),"back to examples"))))},window.addEventListener("resize",a.update),a.state={update:!1},a}return Object(c.a)(n,[{key:"render",value:function(){var e=null;return e=window.screen.width<=768?this.mobileView():this.normalView(),o.a.createElement("div",{style:{marginTop:"70px",color:"white",marginBottom:"20px"}},e)}}]),n}(o.a.Component),ae=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(c.a)(n,[{key:"render",value:function(){return o.a.createElement(j.a,{container:!0,style:{marginTop:"70px",padding:"20px"},justify:"center"},o.a.createElement(j.a,{xs:12,lg:10,sm:10,md:10,item:!0},o.a.createElement(F.a,null,o.a.createElement(j.a,{container:!0,justify:"space-around"},o.a.createElement(j.a,{xs:12,lg:6,sm:12,md:6,item:!0},o.a.createElement("img",{src:"/404.svg",style:{width:"100%",height:"100%"}})),o.a.createElement(j.a,{xs:12,lg:6,sm:12,md:6,item:!0},o.a.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",padding:"20px",flexDirection:"column",width:"100%",height:"100%"}},o.a.createElement("div",{style:{display:"flex",justifyContent:"space-around",width:"180px",alignItems:"center"}},o.a.createElement("div",null,o.a.createElement("img",{src:"/logo.png",style:{width:"50px",height:"50px"}})),o.a.createElement("div",null,o.a.createElement(p.a,{variant:"h4"},"Actumjs"))),o.a.createElement(p.a,{variant:"h4",align:"center"},"Sorry,page not found"),o.a.createElement(T.a,{component:"a",href:"/",variant:"text",color:"primary"},"Back to home")))))))}}]),n}(o.a.Component),oe=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,r=new Array(a),i=0;i<a;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))).getCurPage=function(){switch(window.location.pathname){case"/":return o.a.createElement(_,null);case"/get-started":return o.a.createElement(Y,null);case"/api":return o.a.createElement(Q,null);case"/examples":return o.a.createElement(X,null);case"/basic-react-example":return o.a.createElement(Z,null);case"/basic-vue-example":return o.a.createElement(ee,null);case"/todo-app-with-react-example":return o.a.createElement(te,null);case"/todo-app-with-vue-example":return o.a.createElement(ne,null)}return o.a.createElement(ae,null)},e}return Object(c.a)(n,[{key:"render",value:function(){var e=this.getCurPage();return o.a.createElement(o.a.Fragment,null,o.a.createElement(O,null),e,o.a.createElement(G,null))}}]),n}(o.a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(oe,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},71:function(e,t,n){}},[[264,1,2]]]);
//# sourceMappingURL=main.6b383d7f.chunk.js.map