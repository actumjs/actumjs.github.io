{"version":3,"sources":["components/LinkButton.js","components/HeaderListItem.js","components/SearchBox.js","components/Search.js","components/Header.js","components/Home.js","components/codeComponent.js","components/gettingStarted.js","components/Footer.js","components/apipage.js","components/IntroductionExamples.js","components/Examples.js","components/usingWithReact.js","components/usingWithVue.js","components/todoAppWithReact.js","components/todoAppWithVue.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["LinkButton","props","gotPage","window","location","href","url","document","title","text","Typography","variant","onClick","this","style","cursor","React","Component","HeaderListItem","padding","borderBottom","Button","color","SearchBox","noResultsFound","width","display","justifyContent","alignItems","src","getSearchResult","state","searchText","keyword","results","name","link","keywords","description","filter","p","toLowerCase","includes","trim","message","length","map","t","ListItem","component","ListItemIcon","List","borderRadius","borderTopRightRadius","borderTopLeftRadius","position","left","right","background","top","bottom","border","borderTop","listStyle","screen","focus","searchBox","createRef","current","searchResult","Grow","in","transformOrigin","timeout","Input","defaultValue","inputProps","disableUnderline","inputRef","onChange","e","setState","target","value","onFocus","onBlur","startAdornment","InputAdornment","Header","handleSrceenResize","update","open","renderDrawer","Drawer","onClose","toggleDrawer","Math","max","button","height","index","key","ListItemText","primary","renderMenu","paddingRight","showSearchBox","IconButton","edge","aria-label","Grid","container","justify","spacing","marginTop","addEventListener","drawer","menu","logoText","marginRight","AppBar","paddingTop","Toolbar","Home","renderFeatures","image","feature","item","md","sm","lg","xs","Paper","flexDirection","featurs","hljs","registerLanguage","javascript","highlight","minHeight","align","size","CodeBase","renderCode","consoleStyle","lines","language","lang","className","line","renderHtmlCode","code","html","Prism","languages","random","ref","inputbox","dangerouslySetInnerHTML","__html","copyToClipBoard","range","createRange","selectNode","getSelection","removeAllRanges","addRange","execCommand","copied","setTimeout","GettingStarted","mobileView","list","renderSideMenu","whatIsActumJs","whyActumjs","whyActumJs","installation","CoreConcept","getListItem","whatIsActumJsRef","Divider","whyActumJsRef","installationRef","CoreConceptRef","Link","ArrowLeft","ArrowRight","scrollContent","y","offsetTop","scrollTo","listContent","normalView","margin","paddingLeft","content","marginBottom","Footer","year","Date","getFullYear","APIPage","getHTMLCode","paddingBottom","ExampleIntroduction","mounted","renderReferenceLink","i","reflinks","Examples","getCurrentPage","curPage","BasicReactExample","BasicVueExample","TodoAppWithReact","TodoAppWithVue","PageNotFound","App","getCurPage","pathname","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8773108d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Typography } from '@material-ui/core';\r\nexport default class LinkButton extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    gotPage=()=>{\r\n        window.location.href=this.props.url;\r\n        document.title=this.props.text;\r\n        // window.location.replace(this.props.url);\r\n        // window.history.pushState(null,this.props.text,this.props.url)\r\n    }\r\n    render(){\r\n        return <Typography variant='subtitle2'  onClick={this.gotPage} style={{cursor:'pointer'}}>\r\n                {this.props.text}\r\n               </Typography>\r\n    }\r\n} ","import React from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport LinkButton from './LinkButton';\r\nexport default class HeaderListItem extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        // let borderBottom=(window.location.href.includes(this.props.url))?\"1px solid black\":\"\";\r\n        let borderBottom='';\r\n        return <div style={{padding:'0px 10px',borderBottom:borderBottom}}>\r\n            <Button variant='text' color='primary'   onClick={this.props.onClick} style={{padding:0}}>\r\n                    <LinkButton\r\n                        url={this.props.url}\r\n                        text={this.props.text}\r\n                    />\r\n            </Button>\r\n        </div>\r\n    }\r\n}","import React from 'react'\r\nimport { Grid,InputBase,TextField,Input, Button,ListItem, List,Typography, ListItemIcon, Icon } from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport searchFunction from './Search';\r\nimport PageIcon from '@material-ui/icons/InsertDriveFileOutlined';\r\n\r\n\r\n\r\nexport default class SearchBox extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n          focus:false,\r\n          searchText:''\r\n        }\r\n        this.searchBox=React.createRef();\r\n    }\r\n    componentDidMount(){\r\n      if(window.screen.width<=500){\r\n        if(this.searchBox.current){\r\n          this.searchBox.current.focus();\r\n        }\r\n      }\r\n    }\r\n    noResultsFound=()=>{\r\n      return <div style={{width:'100%',display:'flex',justifyContent:'center',alignItems:'center'}}>\r\n        <img src='/no-data.png' style={{width:'30%'}} />\r\n        </div>\r\n    }\r\n    getSearchResult=()=>{\r\n      if(this.state.searchText=='')return null;\r\n      let results=searchFunction(this.state.searchText);\r\n      let message=''\r\n      if(results.length==0){\r\n        message = <Typography>Sorry no results for `{this.state.searchText}` !</Typography>\r\n        results = this.noResultsFound();\r\n      }else{\r\n          results=results.map((t)=>{\r\n            return <ListItem component={Button} href={t.link} onClick={()=>{window.location.href=t.link}}>\r\n                    <ListItemIcon ><PageIcon/></ListItemIcon>\r\n                    {t.name}\r\n            </ListItem>\r\n          })\r\n          results=<List>{results}</List>;\r\n          message=<Typography>Showing results for {this.state.searchText}</Typography>\r\n      }\r\n      let desktopStyle={ borderRadius:'33px',borderTopRightRadius:0,borderTopLeftRadius:0, position: 'absolute',left: '45%',right: '0',background: 'white',top: '64px',bottom: '-260px',border: '1px solid #8080802b',borderTop: 'none',listStyle: 'none',padding:'30px'};\r\n      let mobileStyle={ borderRadius:'33px',borderTopRightRadius:0,borderTopLeftRadius:0, position: 'absolute',left: '0',right: '0',background: 'white',top: '50px',bottom: '-260px',border: '1px solid #8080802b',borderTop: 'none',listStyle: 'none',padding:'30px'}\r\n      let style=desktopStyle;\r\n      if(window.screen.width<=768){\r\n        style=mobileStyle;\r\n      }\r\n    results=<div style={style}>\r\n      {message}{results}\r\n    </div>\r\n    return results;\r\n    }\r\n    render(){\r\n      let width=200;\r\n      if(this.state.focus){\r\n          width=300;\r\n      }\r\n      if(this.props.width){\r\n        width=this.props.width\r\n      \r\n      }\r\n      let searchResult = this.getSearchResult();\r\n      let onBlur=()=>{\r\n        if(window.screen.width<768  && searchResult!=null )return;\r\n        if(this.props.onBlur){\r\n          this.props.onBlur();\r\n        }else{\r\n          this.setState({focus:false})\r\n          }\r\n      }\r\n        return        <> <Grow\r\n          in={true}\r\n          style={{ transformOrigin: '0 0 0' }}\r\n          {...{ timeout: 1000 }}\r\n        >\r\n           <Input defaultValue=\"\" inputProps={{ 'aria-label': 'description' }} disableUnderline \r\n           inputRef={ this.searchBox}\r\n           onChange={(e)=>{\r\n             this.setState({searchText:e.target.value})\r\n           }}\r\n           style={{\r\n             width:width,\r\n            background: '#d3d3d352',\r\n            padding: '5px',\r\n            borderRadius: '50px'\r\n           }}\r\n           onFocus={()=>{this.setState({focus:true})}}\r\n           onBlur={onBlur}\r\n           startAdornment={<InputAdornment position=\"start\"><SearchIcon/></InputAdornment>}\r\n           />\r\n        </Grow>\r\n        {searchResult}\r\n        </>\r\n    }\r\n}\r\n","export default function  searchFunction(keyword){\n    let pages = [\n        {\n            name:'Actumjs',\n            link:'/',\n            keywords:'Actumjs A state management library for javascript app. Light weight Easy to use Portable ',\n            description:''\n        },\n        {\n            name:'Get Started',\n            link:'/get-started',\n            keywords:'Actumjs What is Actumjs? Why Actumjs? Installation Using NPM Using Yarn With browser script tag Core Concept  Store Actions Listeners',\n            description:''\n        },\n        {\n            name:'Api Reference',\n            link:'/api',\n            keywords:'Actumjs API Reference Using with script tag Using with import statement  Creating store addAction before after removeAction replaceActionCallback trigger getState Adding actions Listening to actions Removing Listener Removing an action Trigger an action Replacing an action callback Reading Data from store Directory structure',\n            description:''\n        },\n        {\n            name:'Examples',\n            link:'/examples',\n            keywords:'Actumjs Examples Using with Reactjs Using with Vuejs Todo App with Reactjs Todo App With Vuejs',\n            description:''\n        },\n    ];\n   return pages.filter((p)=>p.keywords.toLowerCase().includes(keyword.trim().toLowerCase()));\n}\n","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Grid,InputBase,TextField } from '@material-ui/core';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport HeaderListItem from './HeaderListItem';\r\nimport SearchBox from './SearchBox';\r\n\r\nclass Header extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            open:false,\r\n            update:false,\r\n            showSearchBox:false\r\n        }\r\n        window.addEventListener('resize',this.handleSrceenResize)\r\n    }\r\n    //this is to handle srceen resize event\r\n    handleSrceenResize=()=>{\r\n        this.setState({\r\n            update:(!this.state.update),\r\n            open:false\r\n        })\r\n    }\r\n\r\n    renderDrawer=()=>{\r\n        // let searchBox=null\r\n        // if(window.screen.width<500){\r\n        //     searchBox=<div style={{paddingRight:10,}}>\r\n        //                 <SearchBox/>\r\n        //               </div>\r\n        // }\r\n        return <Drawer open={this.state.open} onClose={this.toggleDrawer} >\r\n        <div style={{    width: Math.max([window.screen.width/2,400])}}>\r\n                    <List>\r\n                        <ListItem button >\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-around',\r\n                            width: '180px',\r\n                            alignItems: 'center'\r\n                        }}>\r\n                            <div>\r\n                                <img src='/logo.png' style={{\r\n                                        width: '50px',\r\n                                        height: '50px'\r\n                                }}/>\r\n                            </div>\r\n                            <div>\r\n                                <Typography variant='h4'>\r\n                                    Actumjs\r\n                                </Typography>\r\n                            </div>\r\n                        </div>\r\n                        </ListItem>\r\n                        {['Home','Getting Started', 'API', 'FAQ','GitHub','Need Help?'].map((text, index) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemText primary={text} />\r\n                        </ListItem>\r\n                        ))}\r\n                        {/* <ListItem>\r\n                         {searchBox}\r\n                        </ListItem> */}\r\n                    </List>\r\n                </div>\r\n               </Drawer>\r\n    }\r\n    //this is to render menu\r\n    renderMenu=()=>{\r\n        if(window.screen.width<=768){\r\n            let searchBox=null\r\n            if(window.screen.width>500){\r\n                searchBox=<div style={{paddingRight:10}}>\r\n                            <SearchBox/>\r\n                          </div>\r\n            }else{\r\n                    if(!this.state.showSearchBox){\r\n                        searchBox=<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={()=>{this.setState({showSearchBox:true})}}>\r\n                            <SearchIcon/>\r\n                        </IconButton>\r\n\r\n                    }\r\n            }\r\n\r\n            return <Grid container justify='flex-end' >\r\n                        <Grid>\r\n                            {searchBox}\r\n                           \r\n                        </Grid>\r\n                        <Grid >\r\n                                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={this.toggleDrawer}>\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                        </Grid>\r\n                    </Grid> \r\n        }else{\r\n            return  <Grid container justify='flex-end' spacing={8}>\r\n                        <Grid >\r\n                                    <HeaderListItem text=\"Home\" url=\"/\" />\r\n                        </Grid>\r\n                        <Grid >\r\n                                    <HeaderListItem text=\"Get Started\" url=\"/get-started\" />\r\n                        </Grid>\r\n                        <Grid >\r\n                                    <HeaderListItem text=\"API Documentation\" url=\"/api\" />\r\n                        </Grid>\r\n                        <Grid >\r\n                                    <HeaderListItem text=\"Examples\" url=\"/examples\"/>\r\n                        </Grid>\r\n                        <Grid>\r\n                                <div style={{paddingRight:10,marginTop: -11}}>\r\n                                    <SearchBox/>\r\n                                </div>\r\n                        </Grid>\r\n                    </Grid>\r\n        }\r\n    }\r\n    toggleDrawer=()=>{\r\n        this.setState({open:(!this.state.open)})\r\n    }\r\n    render(){\r\n        let drawer=this.renderDrawer();\r\n        let menu=this.renderMenu();\r\n        let logoText=<div><Typography variant='h4'>Actumjs</Typography></div>\r\n        if(window.screen.width<500){\r\n            if(this.state.showSearchBox){\r\n                logoText=<div style={{marginRight: \"-69px\",}}><SearchBox width=\"200px\" onBlur={()=>{this.setState({showSearchBox:false})}}/></div>\r\n            }\r\n        }\r\n        return <>\r\n            <AppBar position=\"fixed\" style={{background:'white',color:'black',paddingTop:'10px'}}>\r\n                    <Toolbar >\r\n\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-around',\r\n                            width: '180px',\r\n                            alignItems: 'center'\r\n                        }}>\r\n                            <div>\r\n                                <img src='/logo.png' style={{\r\n                                        width: '50px',\r\n                                        height: '50px'\r\n                                    }}/>\r\n                            </div>\r\n                            {logoText}\r\n                        </div>\r\n                        {menu}\r\n\r\n                    </Toolbar>\r\n        </AppBar>\r\n        {drawer}\r\n        </>\r\n    }\r\n}\r\nexport default Header;","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport hljs from 'highlight.js';\r\nimport javascript from  'highlight.js/lib/languages/javascript'\r\nimport 'highlight.js/styles/dark.css'\r\nimport LinkButton from './LinkButton';\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            update:false\r\n        }\r\n        window.addEventListener('resize',this.handleSrceenResize)\r\n    }\r\n    //this is to handle srceen resize event\r\n    handleSrceenResize=()=>{\r\n        this.setState({\r\n            update:(!this.state.update)\r\n        })\r\n    }\r\n\r\n    renderFeatures=()=>{\r\n        let features=[\r\n            {\r\n                title:\"Light weight\",\r\n                image:\"light.png\",\r\n                text:\"Actumjs is small enough to fit in just 5kb.Making it easy to load and  compile at run time.Being small in size actumjs require minimum resources to work.\"\r\n            },\r\n            {\r\n                title:'Easy to use',\r\n                image:\"easy.png\",\r\n                text:'State management libraries for javascript require you to have some level of expertise with programming to use it.whereas you can start using Actumjs with very basic programming  skills'\r\n            },{\r\n                title:'Portable',\r\n                image:\"portable.png\",\r\n                text:'Actumjs provides you the way to create applications that execute seamlessly.'\r\n            }\r\n        ]\r\n      return  <Grid container   style={{padding: '50px 10px 50px 10px',background: '#f1f0ff',justifyContent:'space-around'}}>\r\n                    {\r\n                            features.map((feature,index)=>{\r\n                           return <Grid key={index} item md={6} sm={6} lg={3} xs={12}  style={{display: 'flex',justifyContent: 'center',alignItems: 'center',padding: '5px',marginTop:'20px'}} >\r\n                                <Paper>\r\n                                    <div style={{width: '250px',height: '320px',padding: '10px',display: 'flex',justifyContent: 'center',alignItems: 'center',flexDirection: 'column'}}>\r\n                                        <div>\r\n                                            <img src={\"images/\"+feature.image} style={{width: '200px'}}/>\r\n                                        </div>\r\n                                        <div>\r\n                                            <Typography variant='h5'>{feature.title}</Typography>\r\n                                        </div>\r\n                                        <div style={{padding:'10px'}}>\r\n                                            <Typography variant='subtitle2'>\r\n                                                {feature.text}\r\n                                            </Typography>\r\n                                        </div>\r\n                                    </div>\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n              </Grid>\r\n    }\r\n    render(){\r\n        let featurs=this.renderFeatures();\r\n\r\n        hljs.registerLanguage('javascript',javascript );\r\n        // highlight with providing the language\r\n        const highlightedCode = hljs.highlight('javascript', 'var a=10;for(i=0;i<10;i++)alert(a) console.log(a)').value\r\n\r\n\r\n        return <div style={{marginTop:'75px',color:'white'}}>\r\n            <Grid container  >\r\n                <Grid item xs={12} sm={6} md={6} lg={6}> \r\n                    <div style={{background: '#0080ff'}}>\r\n                                <div style={{display: 'flex',justifyContent: 'space-around',flexDirection: 'column',padding: '10px',alignItems: 'center',minHeight: '200px'}}>\r\n                                <div style={{\r\n                                        background: 'white',\r\n                                        padding: '10px',\r\n                                        border: '10px solid white',\r\n                                        borderRadius: '50%'\r\n                                }}>\r\n                                    <img src='/logo.png' style={{\r\n                                            width: '100px',\r\n                                            height: '100px'\r\n                                    }}/>\r\n                                </div>\r\n                                    <Typography variant='h3' color='inherit' >\r\n                                        Actumjs\r\n                                    </Typography>\r\n                                    <Typography variant='h5' align='center'>\r\n                                        A state management library for javascript app.\r\n                                    </Typography>\r\n                                </div>\r\n                                <div style={{display: 'flex',justifyContent: 'center',alignItems: 'center',padding: '10px'}}>\r\n\r\n                                    <Button  variant='contained' size='large'>\r\n                                        <LinkButton\r\n                                        url={\"/get-started\"}\r\n                                        text=\"Get started\"\r\n                                        />\r\n                                    </Button>\r\n                                </div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6} lg={6} > \r\n                    <div  style={{ display:(window.screen.width<500)?'none':'flex',justifyContent:'center',alignItems:'center',height: '100%'}} >\r\n                        <img src='/home_intro.svg' style={{width: '50%',height: '50%'}}/>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            {featurs}\r\n        </div>\r\n    }\r\n}\r\nexport default Home;","import React from 'react'\r\nimport Prism from 'prismjs';\r\nimport { IconButton,Typography, Icon} from '@material-ui/core';\r\nimport {FileCopy} from '@material-ui/icons'\r\nimport { typography } from '@material-ui/system';\r\nexport default class CodeBase extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            copied:false\r\n        }\r\n        this.inputbox=React.createRef();\r\n    }\r\n    renderCode=()=>{\r\n        let consoleStyle=(window.screen.width<=768)?'consoleStyleMobile':'consoleStyle'\r\n        let lines=this.props.lines\r\n        let language=this.props.lang\r\n        let width='80%'\r\n        if(window.screen.width<=768){\r\n            width=window.screen.width-40;\r\n        }\r\n        let copyButton=null;\r\n        // if(this.state.copied){\r\n        //     copyButton=<span className='textCopiedMessage'>Copied to clip-board</span>\r\n        // }else{\r\n        //     copyButton=<span style={{cursor:'pointer'}} className='textCopiedMessage' onClick={this.copyToClipBoard}>Copy</span>\r\n        // }\r\n\r\n        return <>\r\n                <div >\r\n                        <pre className={consoleStyle}   style={{width:width}}>\r\n                            {lines.map((line,index)=>{\r\n                                return this.renderHtmlCode(line,language)\r\n                            })}\r\n{/* \r\n                        <div style={{display: 'flex',justifyContent: 'space-between',padding: '5px'}} >\r\n                            {copyButton}\r\n                        </div>  */}\r\n                            \r\n                        </pre>\r\n                </div>\r\n            </>\r\n    }\r\n    renderHtmlCode=(code,lang='html')=>{\r\n        let html = Prism.highlight(code, Prism.languages[lang],lang);\r\n        return <code key={Math.random()}  ref={this.inputbox}  dangerouslySetInnerHTML={{__html: html}}></code> \r\n    }\r\n    //this is to copy content to clipboard\r\n    copyToClipBoard=()=>{\r\n        var range = document.createRange();\r\n        range.selectNode(this.inputbox.current);\r\n        window.getSelection().removeAllRanges(); // clear current selection\r\n        window.getSelection().addRange(range); // to select text\r\n        document.execCommand(\"copy\");\r\n        window.getSelection().removeAllRanges();// to deselect\r\n        this.setState({\r\n            copied:true\r\n        })\r\n        setTimeout(()=>{\r\n            this.setState({copied:false})\r\n        },1200)\r\n    }\r\n    render(){\r\n        let code=this.renderCode();\r\n        return code;\r\n    }\r\n}","import React from 'react'\r\nimport { Grid,Paper, List, ListItem, ListItemText, Typography, Divider, Button, Icon, Link } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\nimport LinkButton from './LinkButton'\r\n\r\nexport default class GettingStarted extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        window.addEventListener('resize',this.update)\r\n        this.state={\r\n            update:false,\r\n            open:false,\r\n        }\r\n\r\n        this.whatIsActumJsRef   = React.createRef();\r\n        this.whyActumJsRef      = React.createRef();\r\n        this.installationRef    = React.createRef();\r\n        this.CoreConceptRef     = React.createRef();\r\n        \r\n    }\r\n    toggleDrawer=()=>{\r\n        this.setState({open:(!this.state.open)})\r\n    }\r\n    update=()=>{this.setState({update:(!this.state.update)});}\r\n    mobileView=()=>{\r\n        let list=this.renderSideMenu();\r\n        let whatIsActumJs=this.whatIsActumJs();\r\n        let whyActumjs=this.whyActumJs();\r\n        let installation=this.installation();\r\n        let CoreConcept=this.CoreConcept();\r\n        return<>\r\n            <div style={{padding:'10px',marginTop:'20px'}}>\r\n                <div>\r\n                    {list}\r\n                </div>\r\n                {whatIsActumJs}\r\n                {whyActumjs}\r\n                {installation}\r\n                {CoreConcept}\r\n            </div>\r\n         </>\r\n    }\r\n    getListItem=()=>{\r\n        return [\"What is Actumjs\",\"Why Actumjs?\",\"Installation\",\"Core Concepts\"]\r\n    }\r\n    whatIsActumJs=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return <div ref={this.whatIsActumJsRef}>\r\n            <Typography variant='h4' className='textTitle' >What is Actumjs? </Typography>\r\n            <Divider/>\r\n            <Typography  className={className} >\r\n                Actumjs is a Javascript library to manage application state.\r\n                You can use Actumjs with front-end libraries and frameworks like Reactjs,Vue and Angular.\r\n                <br/>\r\n                it provides a state which is accessible to all other components of an application.\r\n                <br/>The only way to to update the applicaiton state is to trigger an action.\r\n                <br/>\r\n                {/* Actum devtools extension allows to track the updates to store and time-travel debugging. */}\r\n            </Typography>\r\n        </div>\r\n    }\r\n    whyActumJs=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return <div ref={this.whyActumJsRef}>\r\n            <Typography variant='h4' className='textTitle'>Why Actumjs? </Typography>\r\n            <Divider/>\r\n            <Typography className={className}>\r\n                    Managing applicaiton state is arguably the hardest part of any Javascript application development.\r\n                    Specially when,communication between components is done in simplex manner(top to down).\r\n                   \r\n                    <br/>\r\n                    There are so many state management libraries available and more coming\r\n                    around every day. \r\n                    {/* One of the things that makes it so difficult is that we often\r\n                    over-engineer our solution to the problem. */}\r\n                    <br/>\r\n                    While developing Javascript app with front-end frameworks and libs (Reactjs,Vue and Angular), the main problem is sharing application\r\n                    state with other components.\r\n                    <br/>we know react provides one\r\n                    directional communication to its components(parent component pass its\r\n                    state to child component in terms of props),this becomes harder when it comes\r\n                    to write application having  large number of components.\r\n                    that's why we have Actumjs.\r\n            </Typography>\r\n        </div>\r\n    }\r\n    installation=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        let consoleStyle=(window.screen.width<=768)?'consoleStyleMobile':'consoleStyle'\r\n        return <div ref={this.installationRef}>\r\n                    <Typography variant='h4' className='textTitle'>Installation</Typography>\r\n                    <Divider/>\r\n                    <Typography className={className}>\r\n                    {/* Actumjs can be used with both node js and browser */}\r\n                    <br/>\r\n                    <b>Using NPM</b>\r\n                    <CodeBase\r\n                    lines={[\"npm install --save actum\"]}\r\n                    lang='js'\r\n                    />\r\n                    <br/>\r\n                    <b>Using Yarn</b>\r\n                    <CodeBase\r\n                    lines={[\" yarn add actum\"]}\r\n                    lang='js'\r\n                    />\r\n                    <b>\r\n                     With browser script tag\r\n                    </b>\r\n                    <CodeBase\r\n                    lines={['<script type = \"text/Javascript\" src = \"your/path/to/actum.js\"></script>']}\r\n                    lang='html'\r\n                    />\r\n                    </Typography>\r\n                </div>\r\n    }\r\n    CoreConcept=()=>{\r\n        let className   =(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        let width       =(window.screen.width<=768)?'100%':'800px'\r\n\r\n        return <div ref={this.CoreConceptRef} >\r\n                    <Typography  className='textTitle' variant='h4' >Core Concept</Typography>\r\n                    <Divider/>\r\n                    <Typography className={className}>\r\n                            Consider the traditional way to manage app state with Reactjs.\r\n                            <br/>\r\n                            We have components passing its state to child components using props.\r\n                                <Grid container>\r\n                                    <Grid item xs={12} sm={12} lg={6} md={6} >\r\n                                        <img src=\"/images/simplex.png\" \r\n                                        style={{\r\n                                            width: '100%',\r\n                                            height: '100%'\r\n                                        }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            This is quite a simple way we can use with small web apps.\r\n                            <br/>Now ,things goes\r\n                            worst when it comes to make an app with  more components.\r\n                            <br/>Passing data in this way dastrically become tadious.\r\n                            <br/>\r\n                            In this case we need to communicate with bidirectional way like this\r\n                            <Grid container>\r\n                                    <Grid item xs={12} sm={12} lg={8} md={8} >\r\n                                        <img src=\"/images/duplex.png\" \r\n                                        style={{\r\n                                            width: '100%',\r\n                                        }}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            <br/>\r\n                            Actumsjs provides communication between data and component in the\r\n                            following way:\r\n                            <br/>\r\n                            <ul>\r\n                                <li>\r\n                                    A global object representing app state called store is created.\r\n                                </li>\r\n                                <li>\r\n                                    Actions are added to store\r\n                                </li>\r\n                                <li>\r\n                                     Actions update applicaiton state\r\n                                </li>\r\n                                <li>\r\n                                    Component subscribe to store updates by using listeners\r\n                                </li>\r\n                                <li>\r\n                                    Listeners provides way to response to store changes\r\n                                </li>\r\n                                <li>\r\n                                    Store data is available to other components\r\n                                </li>\r\n                            </ul>\r\n                            <Grid container>\r\n                                    <Grid item xs={12} sm={12} lg={12} md={12} >\r\n                                        <img src=\"/images/actum.png\" style={{width: width}}/>\r\n                                    </Grid>\r\n                            </Grid>\r\n                            Actumjs is based on following object and functions to implement state management mechanism\r\n                                <ul>\r\n                                    <li>\r\n                                        <Typography variant='text' >Store</Typography>\r\n                                    </li>\r\n                                    <li>\r\n                                        <Typography variant='text' >Actions</Typography>\r\n                                   </li>\r\n                                    <li>\r\n                                        <Typography variant='text' >Listeners</Typography>\r\n                                    </li>\r\n                                </ul>\r\n                            <br/>\r\n                    </Typography>\r\n                    <Grid container justify='space-between'>\r\n                    <Grid item >\r\n                            <Link href=\"/\">\r\n                                <ArrowLeft/>Home\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Link href=\"/api\">\r\n                                Api Reference\r\n                                <ArrowRight/>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>        \r\n    }\r\n    scrollContent=(index)=>{\r\n        let refs=[this.whatIsActumJsRef,this.whyActumJsRef,this.installationRef,this.CoreConceptRef];\r\n        // [this.whatIsActumJsRef,this.whyActumJsRef,this.installationRef,this.CoreConceptRef]\r\n        let curRef=refs[index];\r\n        // console.log(\"ref\",curRef,index,refs)\r\n         let y=curRef.current.offsetTop-80;\r\n         window.scrollTo(0,y);\r\n         this.toggleDrawer();\r\n    }\r\n    renderSideMenu=()=>{\r\n        let list=null\r\n        let listContent=null;\r\n        if(window.screen.width<=768){\r\n            if(this.state.open){\r\n                 list=this.getListItem();\r\n                 listContent=<List style={{color: 'black',position: 'sticky',top: '74px',left: '0'}}>\r\n                                    {\r\n                                        list.map((item,index)=>{\r\n                                            return <ListItem button alignItems=\"flex-start\" onClick={()=>{this.scrollContent(index)}}>\r\n                                                        <ListItemText  padding=\"56\">{item}</ListItemText>\r\n                                                    </ListItem>\r\n                                            })\r\n                                    }\r\n                                <ListItem button alignItems=\"flex-start\" onClick={this.toggleDrawer}>\r\n                                    <ListItemText  padding=\"56\">Close</ListItemText>\r\n                                </ListItem>\r\n                            </List>;\r\n                return <div className=\"menuListContainer\">\r\n                    {listContent}\r\n                </div>\r\n            }else{\r\n                return <div style={{\r\n                    position: 'fixed',\r\n                    bottom: 0,\r\n                    left: 0\r\n                }}>\r\n                    <IconButton className=\"sideButtom\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={this.toggleDrawer}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                </div>\r\n            }\r\n        }\r\n         list=this.getListItem();\r\n         listContent=null;\r\n        listContent=<List style={{color: 'black',position: 'sticky',top: '74px',left: '0'}}>\r\n                            {\r\n                                list.map((item,index)=>{\r\n                                    return <ListItem button alignItems=\"flex-start\"  onClick={()=>{this.scrollContent(index)}} >\r\n                                                <ListItemText  padding=\"56\">{item}</ListItemText>\r\n                                            </ListItem>\r\n                                    })\r\n                            }\r\n                    </List>\r\n        return listContent;\r\n    }\r\n\r\n    normalView=()=>{\r\n        let list            = this.renderSideMenu();\r\n        let whatIsActumJs   = this.whatIsActumJs();\r\n        let whyActumjs      = this.whyActumJs();\r\n        let installation    = this.installation();\r\n        let CoreConcept     = this.CoreConcept();\r\n    return<Grid container>\r\n            <Grid md={2} lg={2}>\r\n                {list}\r\n            </Grid>\r\n            <Grid md={10} lg={10}>\r\n                <Paper style={{padding:'20px',margin:'20px',paddingLeft: '150px',paddingRight: '150px'}}>\r\n                    {whatIsActumJs}\r\n                    {whyActumjs}\r\n                    {installation}\r\n                    {CoreConcept}\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n\r\n    render(){\r\n        let content=null;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n        }else{\r\n            content=this.normalView();\r\n        }\r\n        return <div style={{marginTop:'70px',color:'white',marginBottom:\"20px\"}}>\r\n            {content}\r\n        </div>; \r\n    }\r\n}","import React from 'react'\r\nimport { Grid, List,ListItem, ListItemText, Typography } from '@material-ui/core';\r\nimport LinkButton from './LinkButton';\r\nclass Footer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n    render(){\r\n        let year=new Date().getFullYear();\r\n        \r\n        return  <Grid container  justify='space-around' \r\n            style={{\r\n                background: '#0080ff',\r\n                color: 'white'\r\n            }}\r\n        >\r\n            <Grid item xs={12} sm={4} md={4} lg={4} >\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center'\r\n                }}>\r\n\r\n                <List >\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                           <Typography variant='h6' >\r\n                                 Links\r\n                            </Typography>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <LinkButton\r\n                            url={\"/\"}\r\n                            text=\"Home\"\r\n                            />\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                            <LinkButton\r\n                            url={\"/get-started\"}\r\n                            text=\"Get started\"\r\n                            />\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                        <LinkButton\r\n                            url={\"/api\"}\r\n                            text=\"Api Documentation\"\r\n                            />\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                        <LinkButton\r\n                            url={\"/examples\"}\r\n                            text=\"Examples\"\r\n                            />\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} sm={4} md={4} lg={4} >\r\n            <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center'\r\n                }}>\r\n\r\n            {/* <List >\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                           <Typography variant='h6'>\r\n                                 Community\r\n                            </Typography>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                           <Typography variant='subtitle2'>\r\n                               Stack overflow\r\n                            </Typography>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <ListItemText>\r\n                           <Typography variant='subtitle2'>\r\n                                Feedback\r\n                            </Typography>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                    <ListItemText>\r\n                           <Typography variant='subtitle2'>\r\n                            Github\r\n                            </Typography>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                </List> */}\r\n                </div>\r\n            </Grid>\r\n            <Grid  item xs={12} sm={4} md={4} lg={4} >\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} lg={12} md={12}>\r\n                    <div style={{padding: '20px'}} >\r\n                        <div style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    padding: '20px'\r\n                                }}>\r\n                                    <div style={{background: 'white',border: '10px solid white',borderRadius: '50%'}}>\r\n                                        <img src='/logo.png' style={{\r\n                                                width: '50px',\r\n                                                height: '50px'\r\n                                        }}/>\r\n                                    </div>\r\n                                    <div style={{padding:'5px'}}>\r\n                                        <Typography variant='h4'>\r\n                                            Actumjs\r\n                                        </Typography>\r\n                                    </div>\r\n                                </div>\r\n                                    <Typography align='center'>Copyright &copy; {year-1}-{year-2000}, Actumjs.</Typography>\r\n                    </div>\r\n                </Grid>\r\n        </Grid>\r\n    }\r\n}\r\nexport default Footer","import React from 'react'\r\nimport { Grid,Paper, List, ListItem, ListItemText, Typography, Divider, Button, Link } from '@material-ui/core';\r\nimport { Icon } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Prism from 'prismjs';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\n\r\nexport default class APIPage extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        window.addEventListener('resize',this.update)\r\n        this.state={\r\n            update:false,\r\n            open:false,\r\n        }\r\n        \r\n    }\r\n    toggleDrawer=()=>{\r\n        this.setState({open:(!this.state.open)})\r\n    }\r\n    update=()=>{this.setState({update:(!this.state.update)});}\r\n    getListItem=()=>{\r\n        return         [\"Using in browser with script tag\",\"Using with require\",\r\n        \"Creating store\",\"Adding actions\",\r\n        \"Listening to actions\",\"Removing Listener\",\r\n        \"Executing listener for certain action\",\r\n        \"Removing an action\",\"Trigger an action\",\r\n        \"Replacing an action callback\",\"Reading Data from store\"]\r\n    }\r\n    renderSideMenu=()=>{\r\n        let list=null\r\n        let listContent=null;\r\n        if(window.screen.width<=768){\r\n            if(this.state.open){\r\n                 list=this.getListItem();\r\n                 listContent=<List style={{color: 'black',position: 'sticky',top: '74px',left: '0'}}>\r\n                                    {\r\n                                        list.map((item,index)=>{\r\n                                            return <ListItem key={index} button alignItems=\"flex-start\">\r\n                                                        <ListItemText  padding=\"56\">{item}</ListItemText>\r\n                                                    </ListItem>\r\n                                            })\r\n                                    }\r\n                                <ListItem button alignItems=\"flex-start\" onClick={this.toggleDrawer}>\r\n                                    <ListItemText  padding=\"56\">Close</ListItemText>\r\n                                </ListItem>\r\n                            </List>;\r\n                return <div className=\"menuListContainer\">\r\n                    {listContent}\r\n                </div>\r\n            }else{\r\n                return <div style={{\r\n                    position: 'fixed',\r\n                    bottom: 0,\r\n                    left: 0\r\n                }}>\r\n                    <IconButton className=\"sideButtom\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={this.toggleDrawer}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                </div>\r\n            }\r\n        }\r\n         list=this.getListItem();\r\n         listContent=null;\r\n        listContent=<List style={{color: 'black',position: 'sticky',top: '74px',left: '0'}}>\r\n                            {\r\n                                list.map((item,index)=>{\r\n                                    return <ListItem key={index} button alignItems=\"flex-start\">\r\n                                                <ListItemText  padding=\"56\">{item}</ListItemText>\r\n                                            </ListItem>\r\n                                    })\r\n                            }\r\n                    </List>\r\n        return listContent;\r\n    }\r\n\r\n    getHTMLCode=(code,lang='html')=>{\r\n        let html = Prism.highlight(code, Prism.languages[lang],lang);\r\n        return <div  dangerouslySetInnerHTML={{__html: html}}></div> \r\n    }\r\n    normalView=()=>{\r\n        let list=this.renderSideMenu();\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        let consoleStyle=(window.screen.width<=768)?'consoleStyleMobile':'consoleStyle'\r\n        return<Grid container justify='center'>\r\n        <Grid item md={8} lg={8}>\r\n            <Paper style={{margin:'20px',padding:'50px'}}>\r\n            <Typography variant='h4' className='textTitle'>API reference</Typography>\r\n                <Typography className={className}>\r\n                    Actumjs  API has a very small number of functions to implement state management system.\r\n                    Actumjs require you to write callback functions to perform actions that  modify app state,\r\n                    and listeners to update ui components. \r\n                    This section provides complete reference to actumjs’s set of functions to manage app state.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>Using  with script tag</Typography>\r\n                <CodeBase\r\n                    lines={[`\\n<script src=\"./your/path/to/actum.js\" type=\"text/javascript\"></script>`]}\r\n                    lang='html'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>Using with import statement</Typography>\r\n                <CodeBase\r\n                    lines={[\r\n                        \"\\nimport {createStore} from '@actumjs/actum';\\n\"\r\n                    ]}\r\n                    lang='js'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>Creating store</Typography>\r\n                <Typography className={className}>\r\n                    You can create a store by calling  createStore function.\r\n                    createStore,requires an object representing the initial state of the app as an argument.\r\n                </Typography>\r\n                <CodeBase\r\n                    lines={[\r\n                        \"   //initial state of store\\n\",\r\n                        \"   const initial_state = { count:0 };         \\n\",\r\n                        \"   const store = createStore(initial_state);\\n\",\r\n                    ]}\r\n                    lang='js'\r\n                    />  \r\n                <Typography className={className}>\r\n                    createStore returns a store object.\r\n                    You can export the store further to use with other components.\r\n                    <br/>\r\n                    Store object comes with following methods\r\n                </Typography>\r\n                <ul className={className} style={{paddingLeft:'30px'}} >\r\n                    <li >addAction</li>\r\n                    <li >before</li>\r\n                    <li >after</li>\r\n                    <li >removeAction</li>\r\n                    <li >replaceActionCallback</li>\r\n                    {/* <li >executeListener</li> */}\r\n                    <li >trigger</li>\r\n                    <li >getState</li>\r\n                </ul>\r\n                <Typography variant='h4' className='textTitle'>\r\n                Adding actions\r\n                </Typography>\r\n                <Typography className={className}>\r\n                 The store object has the addAction method to add actions to the store.\r\n                 addAction method requires an  action name ,and a callback function.\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    an action callback  function will be called with payload and current state.\r\n                    the only way to modify state is to trigger an Action.\r\n                    consider the following action to increase  counter value of the store.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `          \\n`,\r\n                            `store.addAction(\"increment\",`,\r\n                            `(payload,state)=>{ state.count++; });\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography className={className+\" devtip\"}>\r\n                    Note that ,an action callBack associated to an action can't trigger the same action from inside it.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Listening to actions\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    In order to listen to  store updates,the component must add an action listener.\r\n                    Actumjs allows to execute listener  before and after exeuction of action.\r\n                    This can be done by using `after` and `before` methods of store object.\r\n                    Each method as the name suggest ,is specify the sequence at which the listener callback is called.\r\n                    <br/>\r\n                     Both methods require action name and callback .\r\n                     An actionName specify  action to which component want to listen updates.\r\n                     This makes sense when you want to update components based on certain action.\r\n                     The callback function when called will receive additional payload and proxy of current application state.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\n   //listening to increment action\\n`,\r\n                            `   const afterIncrement = store.after(\"increment\",(payload,state)=>{\\n`,\r\n                            `        this.update();//your function to update component\\n`,\r\n                            `    })\\n\\n\\n`,\r\n                        ]}\r\n                        lang='js'/>\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Removing Listener\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    As shown in above example we listen to store updates by adding listeners to store.\r\n                    When we add listener to action,using after or before\r\n                    method, we receive a function.\r\n                    <br/>\r\n                    In above example we hold that function in variable 'afterIncrement'.\r\n                    we can use it further to remove listener from action.\r\n                    Its good practice to remove listeners when component no longer  need to  \r\n                    react on actions or component is unmounted.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\t//removing listener \\n`,\r\n                            `\\tafterIncrement();\\n\\n`,\r\n                        ]}\r\n                lang='js'/>\r\n                {/* <Typography variant='h4' className='textTitle'>\r\n                    Executing listener for certain action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    While working with an async actions, such as making ajax call to an api,\r\n                    you may want to execute a listener after finishing a certain task.\r\n                    executeListener method is useful for such requirements.\r\n                    in order to execute listeners of certain action you need call executeListener by passing action name,position and additional payload as arguments.\r\n                    consider the following example.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `               \\n`,\r\n                            `     const {executeListener}=store;\\n`,\r\n                            `     //add an action to make ajax call\\n`,\r\n                            `     store.addAction({\\n`,\r\n                            `      name:\"fetchData\",\\n`,\r\n                            `      callback:(payload,val,prevent)=>{\\n`,\r\n                            `     //first you need to prevent,the after listener of an action\\n`,\r\n                            `        prevent();\\n`,\r\n                            `     //make an api call\\n`,\r\n                            `  fetch('https://example.com/fetchData').then((response)=> {\\n`,\r\n                            `    //on successful response\\n`,\r\n                            `    executeListener('after','fetchData',payload)\\n`,\r\n                            `  }).catch(function(e) {\\n`,\r\n                            `    console.log('request failed:',e);\\n`,\r\n                            `  });\\n`,\r\n                        ]}\r\n                lang='js'/> */}\r\n                <Typography variant='h4' className='textTitle'>\r\n                Removing an action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                An action can be removed  by making a call to removeAction of store object.\r\n                All listeners attached to action will automatically be removed.\r\n                This method requires only name of action.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n`,\r\n                            `const {removeAction} = store;\\n`,\r\n                            `//removing an action fetchdata\\n`,\r\n                            `removeAction('fetchData');\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography variant='h4' className='textTitle'>\r\n                Trigger an action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    You can dispatch an action by calling trigger method of store object.\r\n                    This will execute action callback as well as action listeners.\r\n                    Trigger action requires action name to me executed.\r\n                    You can pass additional data to action as payload.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\n    const {trigger} = store;\\n`,\r\n                            `    //triggering  an action increment           \\n`,\r\n                            `    trigger('increment',null);\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Replacing an action callback\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    replaceActionCallback is used to replace an existing callback  of an action.it requires action name and callback function.\r\n                    In following example we will try to replace increment action callback with new one,which increase count value by 2.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `          \\n`,\r\n                            `     const {replaceActionCallback}=store;\\n`,\r\n                            `     replaceActionCallback(\"increment\",(payload,state)=>{\\n`,\r\n                            `        state.count+ = 2;\\n`,\r\n                            `     });\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography className={className}>\r\n                    Now whenever increment action will be triggered ,it will increase  count value by two,instead of one.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>\r\n                Reading Data from store\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    Actumjs provides getState method of store object to get the state of app.\r\n                    this method gives an proxy to  state of application store.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `          \\n`,\r\n                            `   const {getState} = store;\\n`,\r\n                            `   let state = getState();\\n`,\r\n                            `   console.log(\"count is  : \",state.count);\\n`,\r\n                            `            \\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography variant='h4' className='textTitle'>\r\n                Directory structure\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    Actumjs impose almost no restriction on where your application store and actions are placed. \r\n                    however its good practice to have file organized in well defined structure.<br/>\r\n                    Actumjs specify following directory structure\r\n                    <br/>\r\n                    <br/>&nbsp;&nbsp;|--src\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;|---store\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/index.js\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;|---actions\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/index.js\r\n                    \r\n                </Typography>\r\n                    <Grid container justify='space-between'>\r\n                        <Grid item >\r\n                            <Link href=\"/get-started\">\r\n                                <ArrowLeft/>Get started\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Link href=\"/examples\">\r\n                                Examples\r\n                            <ArrowRight/>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n    }\r\n\r\n    mobileView=()=>{\r\n        let list=this.renderSideMenu();\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        let consoleStyle=(window.screen.width<=768)?'consoleStyleMobile':'consoleStyle'\r\n       return <Grid container justify='center'>\r\n        <Grid item md={12} lg={12}>\r\n            <div style={{marginTop: '40px',paddingLeft: '10px',paddingRight: '10px'}}>\r\n            <Typography variant='h4' className='textTitle'>API reference</Typography>\r\n                <Typography className={className}>\r\n                    Actumjs  API has a very small number of functions to implement state management system.\r\n                    Actumjs require you to write callback functions to perform actions that  modify app state,\r\n                    and listeners to update ui components. \r\n                    This section provides complete reference to actumjs’s set of functions to manage app state.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>Using  with script tag</Typography>\r\n                <CodeBase\r\n                    lines={[`\\n<script src=\"./your/path/to/actum.js\" type=\"text/javascript\"></script>`]}\r\n                    lang='html'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>Using with import statement</Typography>\r\n                <CodeBase\r\n                    lines={[\r\n                        \"\\nimport {createStore} from '@actumjs/actum'\\n\"\r\n                    ]}\r\n                    lang='js'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>Creating store</Typography>\r\n                <Typography className={className}>\r\n                    You can create a store by calling  createStore function.\r\n                    createStore,requires an object representing the initial state of the app as an argument.\r\n                </Typography>\r\n                <CodeBase\r\n                    lines={[\r\n                        \"   //initial state of store\\n\",\r\n                        \"   const initial_state = { count:0 };\\n\",\r\n                        \"   const store = createStore(initial_state)\\n\",\r\n                    ]}\r\n                    lang='js'\r\n                    />  \r\n                <Typography className={className}>\r\n                    createStore returns a store object.\r\n                    You can export the store further to use with other components.\r\n                    <br/>\r\n                    Store object comes with following methods\r\n                </Typography>\r\n                <ul className={className} style={{paddingLeft:'30px'}} >\r\n                    <li >addAction</li>\r\n                    <li >before</li>\r\n                    <li >after</li>\r\n                    <li >removeAction</li>\r\n                    <li >replaceActionCallback</li>\r\n                    {/* <li >executeListener</li> */}\r\n                    <li >trigger</li>\r\n                    <li >getState</li>\r\n                </ul>\r\n                <Typography variant='h4' className='textTitle'>\r\n                Adding actions\r\n                </Typography>\r\n                <Typography className={className}>\r\n                 The store object has the addAction method to add actions to the store.\r\n                 addAction method requires an  action name ,and a callback function.\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    an action callback  function will be called with payload and current state.\r\n                    the only way to modify state is to trigger an Action.\r\n                    consider the following action to increase  counter value of the store.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\nstore.addAction(\"increment\",(payload,state)=>{ state.count++; })\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography className={className+\" devtip\"}>\r\n                    Note that ,an action callBack associated to an action can't trigger the same action from inside it.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Listening to actions\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    In order to listen to  store updates,the component must add an action listener.\r\n                    Actumjs allows to execute listener  before and after exeuction of action.\r\n                    This can be done by using `after` and `before` methods of store object.\r\n                    Each method as the name suggest ,is specify the sequence at which the listener callback is called.\r\n                    <br/>\r\n                     Both methods require action name and callback .\r\n                     An actionName specify  action to which component want to listen updates.\r\n                     This makes sense when you want to update components based on certain action.\r\n                     The callback function when called will receive additional payload and the current application state.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\n       //listening to increment action\\n`,\r\n                            `       const afterIncrement = store.after(\"increment\",(payload,state)=>{\\n`,\r\n                            `       //your function to update component\\n        this.update();\\n`,\r\n                            `       })\\n\\n\\n`,\r\n                        ]}\r\n                        lang='js'/>\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Removing Listener\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    As shown in above example we listen to store updates by adding listeners to store.\r\n                    When we add listener to action,using after or before\r\n                    method, we receive a function.\r\n                    <br/>\r\n                    In above example we hold that function in variable 'afterIncrement'.\r\n                    we can use it further to remove listener from action.\r\n                    Its good practice to remove listeners when component no longer  need to  \r\n                    react on actions or component is unmounted.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\t//removing listener \\n`,\r\n                            `\\tafterIncrement();\\n\\n`,\r\n                        ]}\r\n                lang='js'/>\r\n                {/* <Typography variant='h4' className='textTitle'>\r\n                    Executing listener for certain action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    While working with an async actions, such as making ajax call to an api,\r\n                    you may want to execute a listener after finishing a certain task.\r\n                    executeListener method is useful for such requirements.\r\n                    in order to execute listeners of certain action you need call executeListener by passing action name,position and additional payload as arguments.\r\n                    consider the following example.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `               \\n`,\r\n                            `     const {executeListener}=store;\\n`,\r\n                            `     //add an action to make ajax call\\n`,\r\n                            `     store.addAction({\\n`,\r\n                            `      name:\"fetchData\",\\n`,\r\n                            `      callback:(payload,val,prevent)=>{\\n`,\r\n                            `     //first you need to prevent,the after listener of an action\\n`,\r\n                            `        prevent();\\n`,\r\n                            `     //make an api call\\n`,\r\n                            `         $.ajax({\\n`,\r\n                            `             url:'https://example.com/fetchData',\\n`,\r\n                            `             method:'get',\\n`,\r\n                            `             success:(response)=>{\\n`,\r\n                            `                //on successful response \\n`,\r\n                            `               //execut all after listner of an action\\n`,\r\n                            `               executeListener('after','fetchData',payload);\\n`,\r\n                            `             }\\n`,\r\n                            `         })\\n`,\r\n                            `        }\\n`,\r\n                            `     })\\n`,\r\n                        ]}\r\n                lang='js'/> */}\r\n                <Typography variant='h4' className='textTitle'>\r\n                Removing an action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                An action can be removed  by making a call to removeAction of store object.\r\n                All listeners attached to action will automatically be removed.\r\n                This method requires only name of action.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n`,\r\n                            `const  { removeAction } = store;\\n`,\r\n                            `//removing an action fetchdata\\n`,\r\n                            `removeAction('fetchData');\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography variant='h4' className='textTitle'>\r\n                Trigger an action\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    You can dispatch an action by calling trigger method of store object.\r\n                    This will  execute action callback as well as action listeners.\r\n                    Trigger action requires action name to me executed.\r\n                    You can pass additional data to action as payload.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `\\n\\n    const {trigger} = store;\\n`,\r\n                            `    //triggering  an action increment           \\n`,\r\n                            `    trigger('increment',null);\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                />\r\n                <Typography variant='h4' className='textTitle'>\r\n                    Replacing an action callback\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    replaceActionCallback is used to replace an existing callback  of an action.it requires action name and callback function.\r\n                    In following example we will try to replace increment action callback with new one,which increase count value by 2.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `          \\n`,\r\n                            `     const {replaceActionCallback} = store;\\n`,\r\n                            `     replaceActionCallback(\"increment\",(payload,state)=>{\\n`,\r\n                            `        state.count+=2;\\n`,\r\n                            `     });\\n\\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography className={className}>\r\n                    Now whenever increment action will be triggered ,it will increase  count value by two,instead of one.\r\n                </Typography>\r\n                <Typography variant='h4' className='textTitle'>\r\n                Reading Data from store\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    Actumjs provides getState method of store object to get the state of app.\r\n                    this method gives an proxy to  state of application store.\r\n                </Typography>\r\n                <CodeBase\r\n                        lines={[\r\n                            `          \\n`,\r\n                            `   const {getState} = store;\\n`,\r\n                            `   let state =getState()\\n`,\r\n                            `   console.log(\"count is  : \",state.count);\\n`,\r\n                            `            \\n`,\r\n                        ]}\r\n                        lang='js'\r\n                        />\r\n                <Typography variant='h4' className='textTitle'>\r\n                Directory structure\r\n                </Typography>\r\n                <Typography className={className}>\r\n                    Actumjs impose almost no restriction on where your application store and actions are placed. \r\n                    however its good practice to have file organized in well defined structure.<br/>\r\n                    Actumjs specify following directory structure\r\n                    <br/>\r\n                    <br/>&nbsp;&nbsp;|--src\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;|---store\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/index.js\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;|---actions\r\n                    <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/index.js\r\n                    \r\n                </Typography>\r\n                    <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                        <Grid item >\r\n                            <Link href=\"/get-started\">\r\n                                <ArrowLeft/>Get started\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item >\r\n                            <Link href=\"/examples\">\r\n                                Examples\r\n                            <ArrowRight/>\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n            </div>\r\n        </Grid>\r\n    </Grid>\r\n    \r\n        \r\n    }\r\n\r\n    render(){\r\n        let content=null;\r\n        let marginTop=0;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n            marginTop='36px';\r\n        }else{\r\n            content=this.normalView();\r\n            marginTop='70px';\r\n        }\r\n\r\n            // const code = `var data = 1;`;\r\n            // const html = Prism.highlight(code, Prism.languages.javascript, 'javascript');\r\n            // <div dangerouslySetInnerHTML={{__html:html}}>\r\n            // </div>\r\n\r\n\r\n        return <div style={{marginTop:marginTop,color:'white',marginBottom:\"20px\"}}>\r\n            {content}\r\n        </div>; \r\n    }\r\n\r\n}","import React  from 'react'\r\nimport { Typography, Grid,Button, Link } from '@material-ui/core';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\n\r\nclass ExampleIntroduction extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        window.addEventListener('resize',this.update)\r\n        this.state={\r\n            update:false,\r\n        }\r\n        this.mounted=false;\r\n    }\r\n    componentDidMount(){\r\n        this.mounted=true;\r\n    }\r\n    componentWillUnmount(){\r\n        this.mounted=false;\r\n    }\r\n    update=()=>{this.mounted && this.setState({update:(!this.state.update)});}\r\n    renderReferenceLink=()=>{\r\n        let refs=[\r\n            {title:\"Using with Reactjs\",link:'basic-react-example'},\r\n            {title:\"Using with Vuejs\",link:'basic-vue-example'},\r\n            {title:\"Todo App with Reactjs\",link:'todo-app-with-react-example'},\r\n            {title:\"Todo App With Vuejs\",link:'todo-app-with-vue-example'},\r\n        ];\r\n        return <ul>\r\n                    {refs.map((i,index)=><li key={index}><a href={i.link}>{i.title}</a></li>)}\r\n               </ul>\r\n    }\r\n    mobileView=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        let reflinks=this.renderReferenceLink();\r\n        return <>\r\n                <Typography  className='textTitle' variant='h4' >Examples</Typography>\r\n                <Typography component='div' className={className}>\r\n                    In this sections we will describe examples using Actumjs with popular front-end libraries/frameworks like Reactjs and vuejs.\r\n                    <br/>\r\n                    We will build example apps for describing basic uses, a todo app , and working with async ajax calls.\r\n                    <br/>\r\n                    <br/>\r\n                    <b>Reference Links</b>\r\n                    <div>\r\n                        {reflinks}\r\n                    </div>\r\n                </Typography>\r\n                <Grid container justify='space-between'>\r\n                <Grid item >\r\n                    <Link href=\"/api\">\r\n                        <ArrowLeft/>Api\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item >\r\n                    <Link href=\"/basic-react-example\">\r\n                        Basic React example\r\n                    <ArrowRight/>\r\n                    </Link>\r\n                </Grid>\r\n                </Grid>\r\n        </> \r\n    }\r\n    normalView=()=>{ \r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n    let reflinks=this.renderReferenceLink();\r\n    return <>\r\n            <Typography  className='textTitle' variant='h4' >Examples</Typography>\r\n            <Typography component='div' className={className}>\r\n                In this sections we will describe examples using Actumjs with popular front-end libraries/frameworks like Reactjs and vuejs.\r\n                <br/>\r\n                We will build example apps for describing basic uses, a todo app , and working with async ajax calls.\r\n                <br/>\r\n                <br/>\r\n                <b>Reference Links</b>\r\n                <div>\r\n                    {reflinks}\r\n                </div>\r\n            </Typography>\r\n            <Grid container justify='space-between'>\r\n                <Grid item >\r\n                    <Link href=\"/api\">\r\n                        <ArrowLeft/>Api\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item >\r\n                    <Link href=\"/basic-react-example\">\r\n                        Basic React example\r\n                    <ArrowRight/>\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n            </>\r\n        }\r\n    render(){\r\n        let content=null;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n        }else{\r\n            content=this.normalView();\r\n        }\r\n        return content;\r\n    }\r\n}\r\nexport default ExampleIntroduction;","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Grid,InputBase,TextField } from '@material-ui/core';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport { Paper,   Divider, Icon } from '@material-ui/core';\r\nimport ExampleIntroduction from './IntroductionExamples';\r\n\r\n\r\nclass Examples extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            open:false,\r\n            update:false\r\n        }\r\n        window.addEventListener('resize',this.handleSrceenResize)\r\n    }\r\n    //this is to handle srceen resize event\r\n    handleSrceenResize=()=>{\r\n        this.setState({\r\n            update:(!this.state.update),\r\n            open:false\r\n        })\r\n    }\r\n    toggleDrawer=()=>{\r\n        this.setState({open:(!this.state.open)})\r\n    }\r\n    //this is to get current visible page\r\n    getCurrentPage=()=>{\r\n        return <ExampleIntroduction/>\r\n    }\r\n    //this is mobile view \r\n    mobileView=()=>{\r\n        let curPage=this.getCurrentPage();\r\n        return<>\r\n            <div style={{padding:'10px',marginTop:'20px'}}>\r\n                    {curPage}\r\n            </div>\r\n         </>\r\n    }\r\n\r\n    //this is normal view\r\n    normalView=()=>{\r\n        let curPage=this.getCurrentPage();\r\n        return<Grid container justify='center'>\r\n            <Grid item md={10} lg={10}>\r\n                <Paper style={{padding:'20px',margin:'20px',paddingLeft: '150px',paddingRight: '150px'}}>\r\n                {curPage}\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n\r\n    render(){\r\n        let content=null;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n        }else{\r\n            content=this.normalView();\r\n        }\r\n        return <div style={{marginTop:'70px',color:'white',marginBottom:\"20px\"}}>\r\n            {content}\r\n        </div>; \r\n\r\n\r\n    }\r\n}\r\nexport default Examples;","import React  from 'react'\r\nimport { Grid, Paper, Typography, Divider,Link } from '@material-ui/core';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\nclass BasicReactExample extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        window.addEventListener('resize',this.update)\r\n        this.state={\r\n            update:false,\r\n        }\r\n\r\n    }\r\n    update=()=>{this.setState({update:(!this.state.update)});}\r\n    normalView=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return<Grid container justify='center'>\r\n                <Grid item md={10} lg={10}>\r\n                    <Paper style={{padding:'20px',margin:'20px',paddingLeft: '100px',paddingRight: '100px'}}>\r\n                        <Typography  className='textTitle' variant='h4' >Counter example using Reactjs</Typography>\r\n                        <Divider/>\r\n            \r\n                        <Typography className={className}>\r\n                            In this section we will see how to make use of Actumjs to create a simple counter app with Reactjs.\r\n                            <br/>\r\n                            First , we need to create a new Reactjs app.\r\n                            This can be done by using create-react-app.\r\n                        </Typography>\r\n                        <CodeBase lines={[\"$ npx create-react-app counter_app\"]}/>\r\n                        <Typography className={className}>\r\n                        After that we need to install Actumjs to our project.\r\n                        </Typography>\r\n                        <CodeBase\r\n                        lines={[\"$ npm install  @actumjs/actum\"]}\r\n                        />\r\n                        <Typography className={className}>\r\n                        Now we will describe our application state as store in src/store/index.js file\r\n                        </Typography>\r\n                        <CodeBase\r\n             lang='js'\r\n                 lines={[`\r\n    import {createStore} from '@actumjs/actum';\r\n    const initialState = {count:0};\r\n    const store = createStore(initialState);\r\n    export default store;`\r\n                    ]}\r\n                 />\r\n              <Typography className={className}>\r\n               To manipulate data within store we need to define actions \r\n               that modity the store in seperate file  `src\\actions\\index.js`\r\n               \r\n             </Typography>\r\n             <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n    //an action to increment counter value\r\n    export function increment(payload,state){\r\n        state.count++;\r\n    }\r\n    //an action to decrement counter value\r\n    export function   decrement(payload,state){\r\n        state.count--;\r\n    }\r\n                     `\r\n                    ]}\r\n                 />\r\n                 <Typography className={className}>\r\n                    All actions are required to be added into store to update it.\r\n                    After adding actions to store our src/store/index.js file will look something like this\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n    import {createStore} from '@actumjs/actum';\r\n    import {increment,decrement} from '../actions'\\n\r\n    const initialState = {count:0};\r\n    const store = createStore(initialState);\\n\r\n    //adding actions to store\r\n    store.addAction(\"increment\",increment);\r\n    store.addAction(\"decrement\",decrement);\\n\r\n    export default store;`\r\n                   ]}\r\n                 />\r\n                  <Typography className={className}>\r\n                      Now our store is defined and actions are added to it,further we need to create our counter component in ./src/components/CounterComponent.js,\r\n                      which will display counter value from store and two buttons to increase and decrease counter value\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n\r\n    render(){\r\n\r\n        let counter = store.getState().count;\r\n\r\n        return <div>\r\n                counter : {counter}\r\n                <button>increase</button>\r\n                <button>decrease</button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n                    ]}\r\n                 />\r\n                  <Typography className={className}>\r\n                      Inorder to trigger an action we need to handle click events of buttons.\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n\r\n    render(){\r\n\r\n        let counter = store.getState().count;\r\n\r\n        return <div>\r\n\r\n                counter : {counter}\r\n                <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\r\n                <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n                    ]}\r\n                 />\r\n                  <Typography className={className}>\r\n                    Now we need to reflect changes to component,to do this we need  to listen  actions and update the components.\r\n                    This can be done by adding listners to store actions and updating component state whenever listner called.\r\n                  </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n            this.state={\r\n                update:false\r\n            }\r\n            \r\n            this.RemoveIncrementListener=null;\r\n            this.RemoveDecrementListener=null;\r\n        }\r\n\r\n        componentDidMount(){\r\n            //add listeners \r\n            this.RemoveIncrementListener=store.after(\"increment\",this.update);\r\n            this.RemoveDecrementListener=store.after(\"decrement\",this.update);\r\n        }\r\n\r\n        componentWillUnmount(){\r\n            //remove all listeners to store\r\n            this.RemoveIncrementListener();\r\n            this.RemoveDecrementListener();\r\n        }\r\n\r\n        //this will cause re-render of component\r\n        update=()=>{this.setState({update:(!this.state.update)})}\r\n\r\n        render(){\r\n\r\n        let counter = store.getState().count;\r\n\r\n        return <div>\r\n\r\n                counter : {counter}\r\n                <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\r\n                <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\r\n            </div>\r\n        }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n                    ]}\r\n                 />\r\n                <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        }\r\n    mobileView=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return<Grid container justify='center'>\r\n        <Grid item md={10} lg={10}>\r\n            <div style={{padding:'10px',margin:'20px'}}>\r\n                <Typography  className='textTitle' variant='h4' >Counter example using Reactjs</Typography>\r\n                <Divider/>\r\n    \r\n                <Typography className={className}>\r\n                    In this section we will see how to make use of Actumjs to create a simple counter app with Reactjs.\r\n                    <br/>\r\n                    First, we need to create a new Reactjs app.\r\n                    This can be done by using create-react-app.\r\n                </Typography>\r\n                <CodeBase lines={[\"$ npx create-react-app counter_app\"]}/>\r\n                <Typography className={className}>\r\n                After that we need to install Actumjs to our project.\r\n                </Typography>\r\n                <CodeBase\r\n                lines={[\"$ npm install  @actumjs/actum\"]}\r\n                />\r\n                <Typography className={className}>\r\n                Now we will describe our application state as store in src/store/index.js file\r\n                </Typography>\r\n                <CodeBase\r\n     lang='js'\r\n         lines={[\r\n`\r\n    import {createStore} from '@actumjs/actum';\r\n    const initialState = {count:0};\r\n    const store = createStore(initialState);\r\n    export default store;\r\n`\r\n            ]}\r\n         />\r\n      <Typography className={className}>\r\n      To manipulate data within store we need to define actions \r\n      that modity the store in seperate file  `src\\actions\\index.js`\r\n     </Typography>\r\n     <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n    //an action to increment counter value\r\n    export function increment(payload,state){\r\n        state.count++;\r\n    }\r\n    //an action to decrement counter value\r\n    export function   decrement(payload,state){\r\n        state.count--;\r\n    }`\r\n            ]}\r\n         />\r\n         <Typography className={className}>\r\n            All actions are required to be added into store to update it.\r\n            After adding actions to store our src/store/index.js file will look something like this\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[`\r\n    import {createStore} from '@actumjs/actum';\r\n    import {increment,decrement} from '../actions\r\n    const initialState = {count:0};\r\n    const store = createStore(initialState);\r\n    //adding actions to store\r\n    store.addAction(\"increment\",increment);\r\n    store.addAction(\"decrement\",decrement);\r\n    export default store;`\r\n           ]}\r\n         />\r\n          <Typography className={className}>\r\n              Now our store is defined and actions are added to it,further we need to create our counter component in ./src/components/CounterComponent.js,\r\n              which will display counter value from store and two buttons to increase and decrease counter value\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n\r\n    render(){\r\n\r\n    let counter = store.getState().count;\r\n\r\n    return <div>\r\n\r\n        counter : {counter}\r\n        <button>increase</button>\r\n        <button>decrease</button>\r\n\r\n    </div>\r\n    }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n            ]}\r\n         />\r\n          <Typography className={className}>\r\n              Inorder to trigger an action we need to handle click events of buttons.\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n        }\r\n\r\n\r\n    render(){\r\n\r\n    let counter = store.getState().count;\r\n\r\n    return <div>\r\n\r\n        counter : {counter}\r\n        <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\r\n        <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\r\n    </div>\r\n    }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n            ]}\r\n         />\r\n          <Typography className={className}>\r\n            Now we need to reflect changes to component,to do this we need  to listen  actions and update the components.\r\n            This can be done by adding listners to store actions and updating component state whenever listner called.\r\n          </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n    import React from 'react';\r\n    import store from '../store';\r\n\r\n    class CounterComponent extends React.Component{\r\n\r\n    constructor(props){\r\n            super(props);\r\n            this.state={\r\n                update:false\r\n            }\r\n        this.RemoveIncrementListener=null;\r\n        this.RemoveDecrementListener=null;\r\n    }\r\n\r\n    componentDidMount(){\r\n    //add listeners \r\n    this.RemoveIncrementListener=store.after(\"increment\",this.update);\r\n    this.RemoveDecrementListener=store.after(\"decrement\",this.update);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    //remove all listeners to store\r\n    this.RemoveIncrementListener();\r\n    this.RemoveDecrementListener();\r\n    }\r\n\r\n\r\n\r\n    //this will cause re-render of component\r\n    update=()=>{this.setState({update:(!this.state.update)})}\r\n\r\n    render(){\r\n\r\n    let counter = store.getState().count;\r\n\r\n    return <div>\r\n\r\n        counter : {counter}\r\n        <button onClick={()=>{store.trigger(\"increment\");}} >increase</button>\r\n        <button onClick={()=>{store.trigger(\"decrement\");}} >decrease</button>\r\n    </div>\r\n    }\r\n    }\r\n\r\n    export default CounterComponent;\r\n`\r\n            ]}\r\n         />\r\n                <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </div>\r\n        </Grid>\r\n    </Grid>\r\n    }\r\n\r\n    render(){\r\n        let content=null;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n        }else{\r\n            content=this.normalView();\r\n        }\r\n        return <div style={{marginTop:'70px',color:'white',marginBottom:\"20px\"}}>\r\n            {content}\r\n        </div>; \r\n    }\r\n}\r\nexport default BasicReactExample;","import React  from 'react'\r\nimport { Grid, Paper, Typography, Divider,Link } from '@material-ui/core';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\nclass BasicVueExample extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        window.addEventListener('resize',this.update)\r\n        this.state={\r\n            update:false,\r\n        }\r\n\r\n    }\r\n    update=()=>{this.setState({update:(!this.state.update)});}\r\n    normalView=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return<Grid container justify='center'>\r\n                <Grid item md={10} lg={10}>\r\n                    <Paper style={{padding:'20px',margin:'20px',paddingLeft: '100px',paddingRight: '100px'}}>\r\n                        <Typography  className='textTitle' variant='h4' >Counter example using Vuejs</Typography>\r\n                        <Divider/>\r\n            \r\n                        <Typography className={className}>\r\n                            In this section we will see how to make use of Actumjs to create a simple counter app with Vuejs.\r\n                            <br/>\r\n                            First ,we need to create a new vuejs app.\r\n                            This can be done by using vue CLI.\r\n                        </Typography>\r\n                        <CodeBase\r\n                            lines={[\"$ vue create counter_app\"]}\r\n                        />\r\n\r\n                        <Typography className={className}>\r\n                        After that you need to install Actumjs to your project by using npm.\r\n                        </Typography>\r\n                        <CodeBase\r\n                        lines={[\"$ npm install  @actumjs/actum\"]}\r\n                        />\r\n                        <Typography className={className}>\r\n                        Now we will describe our application state as store in src/store/index.js file\r\n                        </Typography>\r\n                        <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                    \"import {createStore} from '@actumjs/actum';\\n\",\r\n                    \"const initialState = { count:0 };\\n\",\r\n                     \"const store = createStore(initialState);\\n\",\r\n                     \"export default store;\\n\"\r\n                    ]}\r\n                 />\r\n              <Typography className={className}>\r\n               To manipulate data within store we need to define actions \r\n               that modity the store in seperate file  `src\\actions\\index.js`\r\n             </Typography>\r\n             <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n`\r\n    //an action to increment counter value\r\n    export function increment(payload,state){\r\n        state.count++;\r\n     }\r\n     //an action to decrement counter value\r\n    export function decrement(payload,state){\r\n        state.count--;\r\n     }\r\n \r\n`\r\n                    ]}\r\n                 />\r\n                 <Typography className={className}>\r\n                    All actions are required to be added into store to update it.\r\n                    After adding actions to store our src/store/index.js file will look something like this\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                    \"import {createStore} from '@actumjs/actum';\\n\",\r\n                    \"import {increment,decrement} from '../actions'\\n\\n\",\r\n                    \"const initialState = { count:0 };\\n\",\r\n                     \"const store = createStore(initialState);\\n\\n\",\r\n                     '//adding actions to store\\n',\r\n                     'store.addAction(\"increment\",increment);\\n',\r\n                     'store.addAction(\"decrement\",decrement);\\n\\n',\r\n                     \"export default store;\\n\"\r\n                    ]}\r\n                 />\r\n                  <Typography className={className}>\r\n                      Now our store is defined and actions are added to it,further we need to create our counter compoents in src/components/counter.vue,\r\n                      which will display counter value from store and two buttons to increase and decrease counter value.\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n                <template>\r\n                     <div>\r\n                         <input type='text' :value=\"count\"/>\r\n                         <button >increment</button>\r\n                         <button >decrement</button>\r\n                     </div>\r\n                </template>\r\n                <script>\r\n                 import store from '../store'\r\n                 \r\n                 export default {\r\n                     name:'counter',\r\n                     data:function() {\r\n                         let {count}=store.getState()\r\n                         return {\r\n                             count:count,\r\n                         }\r\n                     }\r\n                 }\r\n                 </script>\r\n\r\n`\r\n                    ]}\r\n                 />\r\n                  <Typography className={className}>\r\n                      Inorder to trigger an action we need to handle click events of buttons.\r\n                      so we will need to define methods and attach them to our buttons\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n                <template>\r\n                     <div>\r\n                         <input type='text' :value=\"count\"/>\r\n                         <button @click=\"increment\">increment</button>\r\n                         <button @click=\"decrement\">decrement</button>\r\n                     </div>\r\n                 </template>\r\n                 <script>\r\n                 import store from '../store'\r\n                 \r\n                 export default {\r\n                     name:'counter',\r\n                     data:function() {\r\n                         let {count}=store.getState()\r\n                         return {\r\n                             count:count,\r\n                         }\r\n                     },\r\n                     mounted:function(){\r\n                         store.after(\"increment\",this.update)\r\n                         store.after(\"decrement\",this.update)\r\n                     },\r\n                     methods:{\r\n                         increment:function(){ store.trigger(\"increment\");},\r\n                         decrement:function(){ store.trigger(\"decrement\");},\r\n                         update:function(){\r\n                             let {count}=store.getState();\r\n                             this.count=count;\r\n                         }\r\n                     }\r\n                 }\r\n                 </script>\r\n`\r\n                    ]}\r\n                 />\r\n                 <Typography className={className}>\r\n                     Finally we need to render that compoent in our App.vue file as shown below\r\n                 </Typography>\r\n                 <CodeBase\r\n             lang='js'\r\n                 lines={[\r\n                     `\r\n                   <template>\r\n                     <div id=\"app\">\r\n                      <counter />\r\n                     </div>\r\n                   </template>\r\n                   \r\n                   <script>\r\n                   import counter from './components/counter'\r\n                   export default {\r\n                     name: 'App',\r\n                     components:{\r\n                       counter:counter\r\n                     }\r\n                   }\r\n                   </script>\r\n                   `\r\n                    ]}\r\n                 />\r\n\r\n               <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        }\r\n    mobileView=()=>{\r\n        let className=(window.screen.width<=768)?'textDescriptionMobile':'textDescription'\r\n        return<Grid container justify='center'>\r\n        <Grid item md={12} lg={12}>\r\n            <div style={{padding:'5px',margin:'20px',}}>\r\n                <Typography  className='textTitle' variant='h4' >Counter example using Vuejs</Typography>\r\n                <Divider/>\r\n    \r\n                <Typography className={className}>\r\n                    In this section we will see how to make use of Actumjs to create a simple counter app with Vuejs.\r\n                    <br/>\r\n                    First ,we need to create a new vuejs app.\r\n                    This can be done by using vue CLI.\r\n                </Typography>\r\n                <CodeBase\r\n                    lines={[\"$ vue create counter_app\"]}\r\n                />\r\n\r\n                <Typography className={className}>\r\n                After that you need to install Actumjs to your project by using npm.\r\n                </Typography>\r\n                <CodeBase\r\n                lines={[\"$ npm install  @actumjs/actum\"]}\r\n                />\r\n                <Typography className={className}>\r\n                Now we will describe our application state as store in src/store/index.js file\r\n                </Typography>\r\n                <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             \"import {createStore} from '@actumjs/actum';\\n\",\r\n             \"const initialState = { count:0 };\\n\",\r\n             \"const store = createStore(initialState);\\n\",\r\n             \"export default store;\\n\"\r\n            ]}\r\n         />\r\n      <Typography className={className}>\r\n       To manipulate data within store we need to define actions \r\n       that modity the store in seperate file  `src\\actions\\index.js`\r\n     </Typography>\r\n     <CodeBase\r\n     lang='js'\r\n         lines={[\r\n`\r\n    //an action to increment counter value\r\n    export function increment(payload,state){\r\n        state.count++;\r\n     }\r\n     //an action to decrement counter value\r\n    export function decrement(payload,state){\r\n        state.count--;\r\n     }\r\n \r\n`\r\n            ]}\r\n         />\r\n         <Typography className={className}>\r\n            All actions are required to be added into store to update it.\r\n            After adding actions to store our src/store/index.js file will look something like this\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n            \"import {createStore} from '@actumjs/actum';\\n\",\r\n            \"import {increment,decrement} from '../actions'\\n\\n\",\r\n            \"const initialState = { count:0 };\\n\",\r\n             \"const store = createStore(initialState);\\n\\n\",\r\n             '//adding actions to store\\n',\r\n             'store.addAction(\"increment\",increment);\\n',\r\n             'store.addAction(\"decrement\",decrement);\\n\\n',\r\n             \"export default store;\\n\"\r\n            ]}\r\n         />\r\n          <Typography className={className}>\r\n              Now our store is defined and actions are added to it,further we need to create our counter compoents in src/components/counter.vue,\r\n              which will display counter value from store and two buttons to increase and decrease counter value.\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n        <template>\r\n             <div>\r\n                 <input type='text' :value=\"count\"/>\r\n                 <button >increment</button>\r\n                 <button >decrement</button>\r\n             </div>\r\n        </template>\r\n        <script>\r\n         import store from '../store'\r\n         \r\n         export default {\r\n             name:'counter',\r\n             data:function() {\r\n                 let {count}=store.getState()\r\n                 return {\r\n                     count:count,\r\n                 }\r\n             }\r\n         }\r\n         </script>\r\n\r\n`\r\n            ]}\r\n         />\r\n          <Typography className={className}>\r\n              Inorder to trigger an action we need to handle click events of buttons.\r\n              so we will need to define methods and attach them to our buttons\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n        <template>\r\n             <div>\r\n                 <input type='text' :value=\"count\"/>\r\n                 <button @click=\"increment\">increment</button>\r\n                 <button @click=\"decrement\">decrement</button>\r\n             </div>\r\n         </template>\r\n         <script>\r\n         import store from '../store'\r\n         \r\n         export default {\r\n             name:'counter',\r\n             data:function() {\r\n                 let {count}=store.getState()\r\n                 return {\r\n                     count:count,\r\n                 }\r\n             },\r\n             mounted:function(){\r\n                 store.after(\"increment\",this.update)\r\n                 store.after(\"decrement\",this.update)\r\n             },\r\n             methods:{\r\n                 increment:function(){ store.trigger(\"increment\");},\r\n                 decrement:function(){ store.trigger(\"decrement\");},\r\n                 update:function(){\r\n                     let {count}=store.getState();\r\n                     this.count=count;\r\n                 }\r\n             }\r\n         }\r\n         </script>\r\n`\r\n            ]}\r\n         />\r\n         <Typography className={className}>\r\n             Finally we need to render that compoent in our App.vue file as shown below\r\n         </Typography>\r\n         <CodeBase\r\n     lang='js'\r\n         lines={[\r\n             `\r\n           <template>\r\n             <div id=\"app\">\r\n              <counter />\r\n             </div>\r\n           </template>\r\n           \r\n           <script>\r\n           import counter from './components/counter'\r\n           export default {\r\n             name: 'App',\r\n             components:{\r\n               counter:counter\r\n             }\r\n           }\r\n           </script>\r\n           `\r\n            ]}\r\n         />\r\n\r\n            <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                <Grid item >\r\n                    <Link href=\"/examples\">\r\n                        <ArrowLeft/>back to examples\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            </div>\r\n        </Grid>\r\n    </Grid>\r\n    }\r\n\r\n    render(){\r\n        let content=null;\r\n        if(window.screen.width<=768){\r\n            content=this.mobileView();\r\n        }else{\r\n            content=this.normalView();\r\n        }\r\n        return <div style={{marginTop:'70px',color:'white',marginBottom:\"20px\"}}>\r\n            {content}\r\n        </div>; \r\n    }\r\n}\r\nexport default BasicVueExample;","import React from 'react'\r\nimport { Grid, Paper, Typography, Divider,Link } from '@material-ui/core';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\nexport default class TodoAppWithReact extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        window.addEventListener('resize', this.update)\r\n        this.state = {\r\n            update: false,\r\n        }\r\n    }\r\n    update = () => { this.setState({ update: (!this.state.update) }); }\r\n    normalView = () => {\r\n        let className =  'textDescription' \r\n        return <Grid container justify='center'>\r\n            <Grid item md={10} lg={10}>\r\n                <Paper style={{ padding: '20px', margin: '20px', paddingLeft: '100px', paddingRight: '100px' }}>\r\n                    <Typography className='textTitle' variant='h4' >Todo App example using Reactjs</Typography>\r\n                    <Divider />\r\n                    <Typography className={className}>\r\n                        Here in this section we will build a todo app using actumjs with Reactjs.\r\n                    <br/>\r\n                    First thing you need to do is creating a new reactjs app using `create-react-app` CLI.\r\n                  </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ npx create-react-app todo_app\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Once your project is created using `create-react-app`,Now we need to install Actumjs.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ npm install  @actumjs/actum\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                    Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .<br />\r\n                    Import `createStore` from the Actumjs package and create the store using it as shown below.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            \"// File : src/store/index.js \\n\",\r\n                            \"import {createStore} from '@actumjs/actum';\\n\",\r\n                            \"const initialState = {todos:[]};\\n\",\r\n                            \"const store = createStore(initialState);\\n\",\r\n                            \"export default store;\\n\"\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside\r\n                        todo_app/src.\r\n                      <br />\r\n                        Describe the actions as show below\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `// File : src/actions/index.js\\n`,\r\n                            `export function addTodo(payload,state){\\n`,\r\n                            `    let todos = state.todos;\\n`,\r\n                            `    let id=1;\\n`,\r\n                            `    if(todos.length>0){\\n`,\r\n                            `        id = todos[todos.length-1].id+1;\\n`,\r\n                            `    }\\n`,\r\n                            `    todos.push({id:id,description:payload});\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function updateTodo(payload,state){\\n`,\r\n                            `    let todos = state.todos;\\n`,\r\n                            `    let editedTodo=todos.find(function(todo){return todo.id==payload.id});\\n`,\r\n                            `    if(editedTodo!==undefined){\\n`,\r\n                            `        editedTodo.todo=payload.todo;\\n`,\r\n                            `    }\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function deleteTodo(payload,state){\\n`,\r\n                            `    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\\n`,\r\n                            `}\\n`,\r\n\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/store/index.js\r\nimport {createStore} from '@actumjs/actum';\r\nimport { addTodo, updateTodo, deleteTodo } from '../actions'\r\n\r\nlet initialState = { todos: [] }\r\n\r\nlet store = createStore(initialState);\r\n\r\nstore.addAction(\"addTodo\", addTodo);\r\nstore.addAction(\"updateTodo\", updateTodo);\r\nstore.addAction(\"deleteTodo\", deleteTodo);\r\n\r\nexport default store;\r\n            `\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File :  src/components/AddTodo.js\r\nimport React from 'react'\r\nimport store from '../store'\r\nexport default class AddTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            errorMessage:'',\r\n            description:''\r\n        }\r\n    }\r\n    addTodo=()=>{\r\n        if(this.state.description==\"\"){\r\n            this.setState({\r\n                errorMessage:\"Please enter description\"\r\n            })\r\n        }else{\r\n            //trigger the action\r\n            store.trigger(\"addTodo\",this.state.description);\r\n            //clear the state\r\n            this.setState({errorMessage:'',description:''});\r\n        }\r\n        \r\n    }\r\n    handleInput=(name,value)=>{\r\n        let curState=this.state;\r\n        curState[name]=value;\r\n        this.setState(curState);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <span className=\"text-danger text-left\">{ this.state.errorMessage }</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 input-group\">\r\n                        <input className=\"form-control\" placeholder=\"Enter Todo here\" value={this.state.description} onChange={(e)=>{this.handleInput(\"description\",e.target.value)}}/>\r\n                        <button className=\"btn btn-primary\" onClick={this.addTodo}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    }\r\n}\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After having component to add todos ,Let's have List and ListItem component to show todo items.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/components/ListItem.js\r\nimport React from 'react'\r\nimport store from '../store';\r\nexport default class ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            curTodo: props.todo\r\n        }\r\n    }\r\n\r\n    deleteTodo = () => {\r\n        store.trigger(\"deleteTodo\", this.state.curTodo);\r\n    }\r\n    doEdit = () => {\r\n        this.setState({ isEditing: true })\r\n    }\r\n    cancelEditing = () => {\r\n        this.setState({ isEditing: false })\r\n    }\r\n    save = () => {\r\n        store.trigger(\"updateTodo\", this.state.curTodo);\r\n        this.setState({ isEditing: false })\r\n    }\r\n    handleInput = (value) => {\r\n        let curTodo = this.state.curTodo;\r\n        curTodo.description = value;\r\n        this.setState({\r\n            curTodo: curTodo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isEditing) {\r\n            return <>\r\n                <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n                    <div className=\"col-md-2\">{this.state.curTodo.id}</div>\r\n                    <div className=\"col-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.curTodo.description} onChange={(e) => { this.handleInput(e.target.value) }} />\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-primary\" onClick={this.save}>Save</button>\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-danger\" onClick={this.cancelEditing}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        } else {\r\n            return <>\r\n                <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n                    <div className=\"col-md-2\">{this.props.todo.id}</div>\r\n                    <div className=\"col-md-2\">{this.props.todo.description}</div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-info\" onClick={this.doEdit}>Edit</button>\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-secondary\" onClick={this.deleteTodo}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        }\r\n\r\n    }\r\n}\r\n             `\r\n                        ]}\r\n                    />\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.js\r\nimport React from 'react'\r\nimport store from '../store';\r\nimport ListItem from './ListItem';\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    getContent = () => {\r\n        let todos = store.getState().todos;\r\n        if (todos.length <= 0) {\r\n            return <div className=\"row\" style={{marginTop:\"10px\"}}><div className=\"col-md-6\" ><h5>No todos to show</h5></div></div>\r\n        }\r\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\r\n    }\r\n    render() {\r\n        let content = this.getContent();\r\n        return <div className=\"container\">\r\n                    {content}\r\n            </div>\r\n    }\r\n}\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component,\r\n                        Inorder to do this we will attach listeners to store actions.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.js\r\n\r\nimport React from 'react'\r\nimport store from '../store';\r\nimport ListItem from './ListItem';\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { update: false }\r\n    }\r\n    componentDidMount(){\r\n        //add listeners to actions\r\n        this.afterAddTodo = store.after(\"addTodo\", this.update);\r\n        this.afterdeleteTodo = store.after(\"deleteTodo\", this.update);\r\n        this.aftereditTodo = store.after(\"updateTodo\", this.update);\r\n    }\r\n    componentWillUnmount(){\r\n        //remove listeners \r\n        this.afterAddTodo();\r\n        this.afterdeleteTodo();\r\n        this.aftereditTodo();\r\n    }\r\n    update = () => {\r\n        this.setState({ update: !this.state.update })\r\n    }\r\n    getContent = () => {\r\n        let todos = store.getState().todos;\r\n        if (todos.length <= 0) {\r\n            return <div className=\"row\" style={{marginTop:\"10px\"}}><div className=\"col-md-6\" ><h5>No todos to show</h5></div></div>\r\n        }\r\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\r\n    }\r\n    render() {\r\n        let content = this.getContent();\r\n        return <div className=\"container\">\r\n                    {content}\r\n            </div>\r\n    }\r\n}\r\n           `\r\n                        ]}\r\n                    />\r\n\r\n                    <Typography className={className + \" devtip\"}>\r\n                            Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners?\r\n                            In this case action listeners will be called to update state of component which is not mounted.\r\n                    </Typography>\r\n                    <Typography className={className}>\r\n                            Finally we will place all component inside our app component.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n`\r\n//File : src/App.js\r\nimport React from 'react'\r\nimport AddTodo from './components/AddTodo';\r\nimport List from './components/List';\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h1>Todos</h1>\r\n                </div>\r\n                <AddTodo />\r\n                <List />\r\n            </div>\r\n\r\n        </>\r\n\r\n    }\r\n}\r\n`\r\n\r\n                        ]}/>\r\n<Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n    mobileView = () => {\r\n        let className = 'textDescriptionMobile';\r\n        return <div style={{ padding: '10px'}}>\r\n                    <Typography className='textTitle' variant='h4' >Todo App example using Reactjs</Typography>\r\n                    <Divider />\r\n                    <Typography className={className}>\r\n                        Here in this section we will build a todo app using actumjs with Reactjs.\r\n                    <br />\r\n                    First thing you need to do is creating a new reactjs app using `create-react-app` CLI,If you don't have it on your system you can install it using npm.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ npx create-react-app todo_app\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Once your project is created using `create-react-app`,Now we need to install Actumjs.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ npm install  @actumjs/actum\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .<br />\r\n                    Import `createStore` from the Actumjs package and create the store using it as shown below.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            \"// File : src/store/index.js \\n\",\r\n                            \"import {createStore} from '@actumjs/actum';\\n\",\r\n                            \"const initialState = {todos:[]};\\n\",\r\n                            \"const store = createStore(initialState);\\n\",\r\n                            \"export default store;\\n\"\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside\r\n                        todo_app/src.\r\n          <br />\r\n          Describe the actions as show below\r\n     </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `// File : src/actions/index.js\\n`,\r\n                            `export function addTodo(payload,state){\\n`,\r\n                            `    let todos = state.todos;\\n`,\r\n                            `    let id=1;\\n`,\r\n                            `    if(todos.length>0){\\n`,\r\n                            `        id = todos[todos.length-1].id+1;\\n`,\r\n                            `    }\\n`,\r\n                            `    todos.push({id:id,description:payload});\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function updateTodo(payload,state){\\n`,\r\n                            `    let todos = state.todos;\\n`,\r\n                            `    let editedTodo=todos.find(function(todo){return todo.id==payload.id});\\n`,\r\n                            `    if(editedTodo!==undefined){\\n`,\r\n                            `        editedTodo.todo=payload.todo;\\n`,\r\n                            `    }\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function deleteTodo(payload,state){\\n`,\r\n                            `    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\\n`,\r\n                            `}\\n`,\r\n\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/store/index.js\r\nimport {createStore} from '@actumjs/actum';\r\nimport { addTodo, updateTodo, deleteTodo } from '../actions'\r\n\r\nlet initialState = { todos: [] }\r\n\r\nlet store = createStore(initialState);\r\n\r\nstore.addAction(\"addTodo\", addTodo);\r\nstore.addAction(\"updateTodo\", updateTodo);\r\nstore.addAction(\"deleteTodo\", deleteTodo);\r\n\r\nexport default store;\r\n            `\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File :  src/components/AddTodo.js\r\nimport React from 'react'\r\nimport store from '../store'\r\nexport default class AddTodo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            errorMessage:'',\r\n            description:''\r\n        }\r\n    }\r\n    addTodo=()=>{\r\n        if(this.state.description==\"\"){\r\n            this.setState({\r\n                errorMessage:\"Please enter description\"\r\n            })\r\n        }else{\r\n            //trigger the action\r\n            store.trigger(\"addTodo\",this.state.description);\r\n            //clear the state\r\n            this.setState({errorMessage:'',description:''});\r\n        }\r\n        \r\n    }\r\n    handleInput=(name,value)=>{\r\n        let curState=this.state;\r\n        curState[name]=value;\r\n        this.setState(curState);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <span className=\"text-danger text-left\">{ this.state.errorMessage }</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 input-group\">\r\n                        <input className=\"form-control\" placeholder=\"Enter Todo here\" value={this.state.description} onChange={(e)=>{this.handleInput(\"description\",e.target.value)}}/>\r\n                        <button className=\"btn btn-primary\" onClick={this.addTodo}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    }\r\n}\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After having component to add todos ,Let's have List and ListItem component to show todo items.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/components/ListItem.js\r\nimport React from 'react'\r\nimport store from '../store';\r\nexport default class ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            curTodo: props.todo\r\n        }\r\n    }\r\n\r\n    deleteTodo = () => {\r\n        store.trigger(\"deleteTodo\", this.state.curTodo);\r\n    }\r\n    doEdit = () => {\r\n        this.setState({ isEditing: true })\r\n    }\r\n    cancelEditing = () => {\r\n        this.setState({ isEditing: false })\r\n    }\r\n    save = () => {\r\n        store.trigger(\"updateTodo\", this.state.curTodo);\r\n        this.setState({ isEditing: false })\r\n    }\r\n    handleInput = (value) => {\r\n        let curTodo = this.state.curTodo;\r\n        curTodo.description = value;\r\n        this.setState({\r\n            curTodo: curTodo\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isEditing) {\r\n            return <>\r\n                <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n                    <div className=\"col-md-2\">{this.state.curTodo.id}</div>\r\n                    <div className=\"col-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.curTodo.description} onChange={(e) => { this.handleInput(e.target.value) }} />\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-primary\" onClick={this.save}>Save</button>\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-danger\" onClick={this.cancelEditing}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        } else {\r\n            return <>\r\n                <div className=\"row\" style={{ marginTop: \"10px\" }}>\r\n                    <div className=\"col-md-2\">{this.props.todo.id}</div>\r\n                    <div className=\"col-md-2\">{this.props.todo.description}</div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-info\" onClick={this.doEdit}>Edit</button>\r\n                    </div>\r\n                    <div className=\"col-md-1\">\r\n                        <button className=\"btn btn-secondary\" onClick={this.deleteTodo}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        }\r\n\r\n    }\r\n}\r\n             `\r\n                        ]}\r\n                    />\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.js\r\nimport React from 'react'\r\nimport store from '../store';\r\nimport ListItem from './ListItem';\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    getContent = () => {\r\n        let todos = store.getState().todos;\r\n        if (todos.length <= 0) {\r\n            return <div className=\"row\" style={{marginTop:\"10px\"}}><div className=\"col-md-6\" ><h5>No todos to show</h5></div></div>\r\n        }\r\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\r\n    }\r\n    render() {\r\n        let content = this.getContent();\r\n        return <div className=\"container\">\r\n                    {content}\r\n            </div>\r\n    }\r\n}\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component,\r\n                        Inorder to do this we will attach listeners to store actions.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.js\r\n\r\nimport React from 'react'\r\nimport store from '../store';\r\nimport ListItem from './ListItem';\r\nexport default class List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { update: false }\r\n    }\r\n    componentDidMount(){\r\n        //add listeners to actions\r\n        this.afterAddTodo = store.after(\"addTodo\", this.update);\r\n        this.afterdeleteTodo = store.after(\"deleteTodo\", this.update);\r\n        this.aftereditTodo = store.after(\"updateTodo\", this.update);\r\n    }\r\n    componentWillUnmount(){\r\n        //remove listeners \r\n        this.afterAddTodo();\r\n        this.afterdeleteTodo();\r\n        this.aftereditTodo();\r\n    }\r\n    update = () => {\r\n        this.setState({ update: !this.state.update })\r\n    }\r\n    getContent = () => {\r\n        let todos = store.getState().todos;\r\n        if (todos.length <= 0) {\r\n            return <div className=\"row\" style={{marginTop:\"10px\"}}><div className=\"col-md-6\" ><h5>No todos to show</h5></div></div>\r\n        }\r\n        return <>{todos.map(todo=><ListItem key={todo.id} todo={todo} />)}</>\r\n    }\r\n    render() {\r\n        let content = this.getContent();\r\n        return <div className=\"container\">\r\n                    {content}\r\n            </div>\r\n    }\r\n}\r\n           `\r\n                        ]}\r\n                    />\r\n\r\n                    <Typography className={className + \" devtip\"}>\r\n                            Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners?\r\n                            In this case action listeners will be called to update state of component which is not mounted.\r\n                    </Typography>\r\n                    <Typography className={className}>\r\n                            Finally we will place all component inside our app component.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n`\r\n//File : src/App.js\r\nimport React from 'react'\r\nimport AddTodo from './components/AddTodo';\r\nimport List from './components/List';\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h1>Todos</h1>\r\n                </div>\r\n                <AddTodo />\r\n                <List />\r\n            </div>\r\n\r\n        </>\r\n\r\n    }\r\n}\r\n`\r\n\r\n                        ]}/>\r\n                        <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n    }\r\n    render() {\r\n        let content = null;\r\n        if (window.screen.width <= 768) {\r\n            content = this.mobileView();\r\n        } else {\r\n            content = this.normalView();\r\n        }\r\n        return <div style={{ marginTop: '70px', color: 'white', marginBottom: \"20px\" }}>\r\n            {content}\r\n        </div>;\r\n    }\r\n}","import React from 'react'\r\nimport { Grid, Paper, Typography, Divider,Link } from '@material-ui/core';\r\nimport CodeBase from './codeComponent';\r\nimport { ArrowLeft, ArrowRight } from '@material-ui/icons';\r\n\r\n\r\nexport default class TodoAppWithVue extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        window.addEventListener('resize', this.update)\r\n        this.state = {\r\n            update: false,\r\n        }\r\n    }\r\n    update = () => { this.setState({ update: (!this.state.update) }); }\r\n    normalView = () => {\r\n        let className =  'textDescription' \r\n        return <Grid container justify='center'>\r\n            <Grid item md={10} lg={10}>\r\n                <Paper style={{ padding: '20px', margin: '20px', paddingLeft: '100px', paddingRight: '100px' }}>\r\n                    <Typography className='textTitle' variant='h4' >Todo App example using Vuejs</Typography>\r\n                    <Divider />\r\n\r\n                    <Typography className={className}>\r\n                        Here in this section we will build a todo app using Actumjs with Vuejs.\r\n                    <br />\r\n                    First thing you need to do is creating a new vue app using `vue` CLI.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ vue create todo_app\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Once your project is created ,Now we need to install Actumjs.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lines={[\"$ cd todo_app\",\"\\n$ npm install  @actumjs/actum\"]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .<br />\r\n                    Import `createStore` from the Actumjs package and create the store using it as shown below.\r\n                </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            \"// File : src/store/index.js \\n\",\r\n                            \"import {createStore} from '@actumjs/actum';\\n\",\r\n                            \"const initialState = {todos:[]}\\n\",\r\n                            \"const store = createStore(initialState);\\n\",\r\n                            \"export default store;\\n\"\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside\r\n                        todo_app/src.\r\n          <br />\r\n          Finally describe the actions as show below\r\n     </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `// File : src/actions/index.js\\n`,\r\n                            `export function addTodo(payload,state){\\n`,\r\n                            `let todos = state.todos;`,\r\n                            `    let id=1;\\n`,\r\n                            `    if(todos.length>0){\\n`,\r\n                            `        id=todos[todos.length-1].id+1;\\n`,\r\n                            `    }\\n`,\r\n                            `    todos.push({id:id,description:payload});\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function updateTodo(payload,state){\\n`,\r\n                            `let todos = state.todos;`,\r\n                            `    let editedtodo=todos.find(function(todo){return todo.id==payload.id});\\n`,\r\n                            `    if(editedtodo!==undefined){\\n`,\r\n                            `        editedtodo.todo=payload.todo;\\n`,\r\n                            `    }\\n`,\r\n                            `}\\n`,\r\n                            `\\n`,\r\n                            `export function deleteTodo(payload,state){\\n`,\r\n                            `    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\\n`,\r\n                            `}\\n`,\r\n\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/store/index.js\r\nimport {createStore} from '@actumjs/actum';\r\nimport { addTodo, updateTodo, deleteTodo } from '../actions'\r\n\r\nlet initialState = { todos: [] }\r\n\r\nlet store = createStore(initialState);\r\n\r\nstore.addAction(\"addTodo\", addTodo);\r\nstore.addAction(\"updateTodo\", updateTodo);\r\nstore.addAction(\"deleteTodo\", deleteTodo);\r\n\r\nexport default store;\r\n            `\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File :  src/components/AddTodo.vue\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <span v-if=\"error\" class=\"text-danger text-left\">{{errorMessage}}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 input-group\">\r\n        <input class=\"form-control\" placeholder=\"Enter Todo here\" v-model=\"description\" />\r\n        <button class=\"btn btn-primary\" @click=\"addTodo\">Add</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nexport default {\r\n  name: \"AddTodo\",\r\n  data: function() {\r\n    return { description: \"\", error: false, errorMessage: \"\" };\r\n  },\r\n  methods: {\r\n    addTodo: function() {\r\n      if (this.description == \"\") {\r\n        this.error = true;\r\n        this.errorMessage = \"Please enter description\";\r\n      } else {\r\n        store.trigger(\"addTodo\", this.description);\r\n        this.description = \"\";\r\n        this.error = false;\r\n        this.errorMessage = \"\";\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        After having Component to add todos ,Let's have List and ListItem component to show todo items\r\n                    </Typography>\r\n                    <Typography className={className}>\r\n                      ListItem.vue\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File : src/components/ListItem.vue\r\n<template>\r\n  <div>\r\n    <div v-if=\"isEditing\" class=\"row\" style=\"margin-top:10px\">\r\n      <div class=\"col-md-2\">{{todo.id}}</div>\r\n      <div class=\"col-md-2\">\r\n        <input type=\"text\" class=\"form-control\" v-model=\"curTodo.description\" />\r\n      </div>\r\n      <div class=\"col-md-1\">\r\n        <button class=\"btn btn-primary\" @click=\"save\">Save</button>\r\n      </div>\r\n      <div class=\"col-md-1\">\r\n        <button class=\"btn btn-danger\" @click=\"cancelEditing\">Cancel</button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"!isEditing\" class=\"row\" style=\"margin-top:10px\">\r\n      <div class=\"col-md-2\">{{todo.id}}</div>\r\n      <div class=\"col-md-2\">{{todo.description}}</div>\r\n      <div class=\"col-md-1\">\r\n        <button class=\"btn btn-info\" @click=\"doEdit\">Edit</button>\r\n      </div>\r\n      <div class=\"col-md-1\">\r\n        <button class=\"btn btn-secondary\" @click=\"deleteTodo\">Delete</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nexport default {\r\n  name: \"ListItem\",\r\n  props: [\"todo\"],\r\n  methods: {\r\n    deleteTodo: function() {\r\n      store.trigger(\"deleteTodo\", this.curTodo);\r\n    },\r\n    doEdit: function() {\r\n      this.isEditing = true;\r\n    },\r\n    cancelEditing: function() {\r\n      this.isEditing = false;\r\n    },\r\n    save: function() {\r\n      store.trigger(\"updateTodo\", this.curTodo);\r\n      this.isEditing = false;\r\n    }\r\n  },\r\n  data: function() {\r\n    return {\r\n      isEditing: false,\r\n      curTodo: this.todo\r\n    };\r\n  }\r\n};\r\n</script>\r\n             `\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                      List.vue\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.vue\r\n<template>\r\n  <div class=\"container\">\r\n    <ListItem v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" />\r\n    <div class=\"row\" v-if=\"todos.length<=0\">\r\n      <div class=\"col-md-6\" style=\"margin-top:10px\">\r\n        <h5>No todos to show</h5>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nimport ListItem from \"./ListItem\";\r\nexport default {\r\n  name: \"List\",\r\n  data: function() {\r\n    return { todos: store.getState().todos };\r\n  },\r\n  components: {\r\n    ListItem\r\n  }\r\n};\r\n</script>\r\n`\r\n                        ]}\r\n                    />\r\n                    <Typography className={className}>\r\n                        Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component,\r\n                        Inorder to do this we will attach listeners to store actions.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n                            `\r\n//File src/components/List.vue\r\n<template>\r\n  <div class=\"container\">\r\n    <ListItem v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" />\r\n    <div class=\"row\" v-if=\"todos.length<=0\">\r\n      <div class=\"col-md-6\" style=\"margin-top:10px\">\r\n        <h5>No todos to show</h5>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nimport ListItem from \"./ListItem\";\r\nexport default {\r\n  name: \"List\",\r\n  methods: {\r\n    updateList: function() {\r\n      this.todos = store.getState().todos;\r\n    }\r\n  },\r\n  mounted: function() {\r\n    this.removeAddTodoListner    = store.after(\"addTodo\", this.updateList);\r\n    this.removeUpdateTodoListner = store.after(\"updateTodo\", this.updateList);\r\n    this.removeDeleteTodoListner = store.after(\"deleteTodo\", this.updateList);\r\n  },\r\n  unmounted:function(){\r\n    this.removeAddTodoListner();    \r\n    this.removeUpdateTodoListner(); \r\n    this.removeDeleteTodoListner(); \r\n  },\r\n  data: function() {\r\n    return { todos: store.getState().todos };\r\n  },\r\n  components: {\r\n    ListItem\r\n  }\r\n};\r\n</script>\r\n           `\r\n                        ]}\r\n                    />\r\n\r\n                    <Typography className={className + \" devtip\"}>\r\n                            Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners?\r\n                            In this case action listeners will be called to update state of component which is not mounted.\r\n                    </Typography>\r\n                    <Typography className={className}>\r\n                            Finally we will place all component inside our app component.\r\n                    </Typography>\r\n                    <CodeBase\r\n                        lang='js'\r\n                        lines={[\r\n`\r\n//File : src/App.vue\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <h1>Todos</h1>\r\n    </div>\r\n    <AddTodo />\r\n    <List />\r\n  </div>\r\n</template>\r\n<script>\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport List from \"./components/List\";\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    AddTodo,\r\n    List\r\n  }\r\n};\r\n</script>\r\n`\r\n                        ]}/>\r\n\r\n<Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    }\r\n    mobileView = () => {\r\n        let className = 'textDescriptionMobile';\r\n        return <div style={{ margin: '10px'}}>\r\n                <Typography className='textTitle' variant='h4' >Todo App example using Vuejs</Typography>\r\n                <Divider />\r\n\r\n                <Typography className={className}>\r\n                    Here in this section we will build a todo app using Actumjs with Vuejs.\r\n                <br />\r\n                First thing you need to do is creating a new vue app using `vue` CLI.\r\n            </Typography>\r\n                <CodeBase\r\n                    lines={[\"$ vue create todo_app\"]}\r\n                />\r\n                <Typography className={className}>\r\n                    Once your project is created ,Now we need to install Actumjs.\r\n            </Typography>\r\n                <CodeBase\r\n                    lines={[\"$ cd todo_app\",\"\\n$ npm install  @actumjs/actum\"]}\r\n                />\r\n                <Typography className={className}>\r\n                    Inside your todo_app/src folder, Create a folder named `store`,Along with file index.js .<br />\r\n                Import `createStore` from the Actumjs package and create the store using it as shown below.\r\n            </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        \"// File : src/store/index.js \\n\",\r\n                        \"import {createStore} from '@actumjs/actum';\\n\",\r\n                        \"const initialState = {todos:[]}\\n\",\r\n                        \"const store = createStore(initialState);\\n\",\r\n                        \"export default store;\\n\"\r\n                    ]}\r\n                />\r\n                <Typography className={className}>\r\n                    After that we need to describe actions that update the store,For that,Let's create a folder named `actions` having file index.js inside\r\n                    todo_app/src.\r\n      <br />\r\n      Finally describe the actions as show below\r\n </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `// File : src/actions/index.js\\n`,\r\n                        `export function addTodo(payload,state){\\n`,\r\n                        `let todos = state.todos;`,\r\n                        `    let id=1;\\n`,\r\n                        `    if(todos.length>0){\\n`,\r\n                        `        id=todos[todos.length-1].id+1;\\n`,\r\n                        `    }\\n`,\r\n                        `    todos.push({id:id,description:payload});\\n`,\r\n                        `}\\n`,\r\n                        `\\n`,\r\n                        `export function updateTodo(payload,state){\\n`,\r\n                        `let todos = state.todos;`,\r\n                        `    let editedtodo=todos.find(function(todo){return todo.id==payload.id});\\n`,\r\n                        `    if(editedtodo!==undefined){\\n`,\r\n                        `        editedtodo.todo=payload.todo;\\n`,\r\n                        `    }\\n`,\r\n                        `}\\n`,\r\n                        `\\n`,\r\n                        `export function deleteTodo(payload,state){\\n`,\r\n                        `    state.todos = state.todos.filter(function(todo){return todo.id!=payload.id});\\n`,\r\n                        `}\\n`,\r\n\r\n                    ]}\r\n                />\r\n                <Typography className={className}>\r\n                    At this point both actions and store is defined,Now we attach actions to store by using addAction method of store object.\r\n                </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `\r\n//File : src/store/index.js\r\nimport {createStore} from '@actumjs/actum';\r\nimport { addTodo, updateTodo, deleteTodo } from '../actions'\r\n\r\nlet initialState = { todos: [] }\r\n\r\nlet store = createStore(initialState);\r\n\r\nstore.addAction(\"addTodo\", addTodo);\r\nstore.addAction(\"updateTodo\", updateTodo);\r\nstore.addAction(\"deleteTodo\", deleteTodo);\r\n\r\nexport default store;\r\n        `\r\n                    ]}\r\n                />\r\n                <Typography className={className}>\r\n                    Now we need to create a component to add todos into the  store,We will describe our `AddTodo` component as below\r\n                </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `\r\n//File :  src/components/AddTodo.vue\r\n<template>\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n  <div class=\"col-md-6\">\r\n    <span v-if=\"error\" class=\"text-danger text-left\">{{errorMessage}}</span>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-md-6 input-group\">\r\n    <input class=\"form-control\" placeholder=\"Enter Todo here\" v-model=\"description\" />\r\n    <button class=\"btn btn-primary\" @click=\"addTodo\">Add</button>\r\n  </div>\r\n</div>\r\n</div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nexport default {\r\nname: \"AddTodo\",\r\ndata: function() {\r\nreturn { description: \"\", error: false, errorMessage: \"\" };\r\n},\r\nmethods: {\r\naddTodo: function() {\r\n  if (this.description == \"\") {\r\n    this.error = true;\r\n    this.errorMessage = \"Please enter description\";\r\n  } else {\r\n    store.trigger(\"addTodo\", this.description);\r\n    this.description = \"\";\r\n    this.error = false;\r\n    this.errorMessage = \"\";\r\n  }\r\n}\r\n}\r\n};\r\n</script>\r\n`\r\n                    ]}\r\n                />\r\n                <Typography className={className}>\r\n                    After having Component to add todos ,Let's have List and ListItem component to show todo items\r\n                </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `\r\n//File : src/components/ListItem.vue\r\n<template>\r\n<div>\r\n<div v-if=\"isEditing\" class=\"row\" style=\"margin-top:10px\">\r\n  <div class=\"col-md-2\">{{todo.id}}</div>\r\n  <div class=\"col-md-2\">\r\n    <input type=\"text\" class=\"form-control\" v-model=\"curTodo.description\" />\r\n  </div>\r\n  <div class=\"col-md-1\">\r\n    <button class=\"btn btn-primary\" @click=\"save\">Save</button>\r\n  </div>\r\n  <div class=\"col-md-1\">\r\n    <button class=\"btn btn-danger\" @click=\"cancelEditing\">Cancel</button>\r\n  </div>\r\n</div>\r\n<div v-if=\"!isEditing\" class=\"row\" style=\"margin-top:10px\">\r\n  <div class=\"col-md-2\">{{todo.id}}</div>\r\n  <div class=\"col-md-2\">{{todo.description}}</div>\r\n  <div class=\"col-md-1\">\r\n    <button class=\"btn btn-info\" @click=\"doEdit\">Edit</button>\r\n  </div>\r\n  <div class=\"col-md-1\">\r\n    <button class=\"btn btn-secondary\" @click=\"deleteTodo\">Delete</button>\r\n  </div>\r\n</div>\r\n</div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nexport default {\r\nname: \"ListItem\",\r\nprops: [\"todo\"],\r\nmethods: {\r\ndeleteTodo: function() {\r\n  store.trigger(\"deleteTodo\", this.curTodo);\r\n},\r\ndoEdit: function() {\r\n  this.isEditing = true;\r\n},\r\ncancelEditing: function() {\r\n  this.isEditing = false;\r\n},\r\nsave: function() {\r\n  store.trigger(\"updateTodo\", this.curTodo);\r\n  this.isEditing = false;\r\n}\r\n},\r\ndata: function() {\r\nreturn {\r\n  isEditing: false,\r\n  curTodo: this.todo\r\n};\r\n}\r\n};\r\n</script>\r\n         `\r\n                    ]}\r\n                />\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `\r\n//File src/components/List.vue\r\n<template>\r\n<div class=\"container\">\r\n<ListItem v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" />\r\n<div class=\"row\" v-if=\"todos.length<=0\">\r\n  <div class=\"col-md-6\" style=\"margin-top:10px\">\r\n    <h5>No todos to show</h5>\r\n  </div>\r\n</div>\r\n</div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nimport ListItem from \"./ListItem\";\r\nexport default {\r\nname: \"List\",\r\ndata: function() {\r\nreturn { todos: store.getState().todos };\r\n},\r\ncomponents: {\r\nListItem\r\n}\r\n};\r\n</script>\r\n`\r\n                    ]}\r\n                />\r\n                <Typography className={className}>\r\n                    Till now we have list component that render todo items from store ,Each time when the store is updated we need to update/re-render our component,\r\n                    Inorder to do this we will attach listeners to store actions.\r\n                </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n                        `\r\n//File src/components/List.vue\r\n<template>\r\n<div class=\"container\">\r\n<ListItem v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" />\r\n<div class=\"row\" v-if=\"todos.length<=0\">\r\n  <div class=\"col-md-6\" style=\"margin-top:10px\">\r\n    <h5>No todos to show</h5>\r\n  </div>\r\n</div>\r\n</div>\r\n</template>\r\n<script>\r\nimport store from \"../store\";\r\nimport ListItem from \"./ListItem\";\r\nexport default {\r\nname: \"List\",\r\nmethods: {\r\nupdateList: function() {\r\n  this.todos = store.getState().todos;\r\n}\r\n},\r\nmounted: function() {\r\nthis.removeAddTodoListner    = store.after(\"addTodo\", this.updateList);\r\nthis.removeUpdateTodoListner = store.after(\"updateTodo\", this.updateList);\r\nthis.removeDeleteTodoListner = store.after(\"deleteTodo\", this.updateList);\r\n},\r\nunmounted:function(){\r\nthis.removeAddTodoListner();    \r\nthis.removeUpdateTodoListner(); \r\nthis.removeDeleteTodoListner(); \r\n},\r\ndata: function() {\r\nreturn { todos: store.getState().todos };\r\n},\r\ncomponents: {\r\nListItem\r\n}\r\n};\r\n</script>\r\n       `\r\n                    ]}\r\n                />\r\n\r\n                <Typography className={className + \" devtip\"}>\r\n                        Its important to remove action listeners once component is no longer mounted,So what will happen if we don't remove action's listeners?\r\n                        In this case action listeners will be called to update state of component which is not mounted.\r\n                </Typography>\r\n                <Typography className={className}>\r\n                        Finally we will place all component inside our app component.\r\n                </Typography>\r\n                <CodeBase\r\n                    lang='js'\r\n                    lines={[\r\n`\r\n//File : src/App.vue\r\n<template>\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n  <h1>Todos</h1>\r\n</div>\r\n<AddTodo />\r\n<List />\r\n</div>\r\n</template>\r\n<script>\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport List from \"./components/List\";\r\nexport default {\r\nname: \"App\",\r\ncomponents: {\r\nAddTodo,\r\nList\r\n}\r\n};\r\n</script>\r\n`\r\n                    ]}/>\r\n                                    <Grid container justify='space-between' style={{paddingBottom:'50px'}}>\r\n                    <Grid item >\r\n                        <Link href=\"/examples\">\r\n                            <ArrowLeft/>back to examples\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n    }\r\n    render() {\r\n        let content = null;\r\n        if (window.screen.width <= 768) {\r\n            content = this.mobileView();\r\n        } else {\r\n            content = this.normalView();\r\n        }\r\n        return <div style={{ marginTop: '70px', color: 'white', marginBottom: \"20px\" }}>\r\n            {content}\r\n        </div>;\r\n    }\r\n}","import React from 'react'\nimport { Grid, Typography, Paper, Button } from '@material-ui/core';\nexport class PageNotFound extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return <Grid container style={{marginTop:'70px',padding:'20px'}} justify='center'>\n                    <Grid xs={12} lg={10} sm={10} md={10}  item >\n                        <Paper>\n                            <Grid container justify='space-around'>\n\n                                <Grid xs={12} lg={6} sm={12} md={6} item >\n                                    <img src='/404.svg' style={{width:'100%',height:'100%'}}/>\n                                </Grid>\n\n                                <Grid xs={12} lg={6} sm={12} md={6} item >\n                                        <div style={{\n                                            display:'flex',\n                                            justifyContent:'center',\n                                            alignItems:'center',\n                                            padding:'20px',\n                                            flexDirection:'column',\n                                            width:'100%',\n                                            height:'100%'\n                                        }}>\n                                            <div style={{\n                                            display: 'flex',\n                                            justifyContent: 'space-around',\n                                            width: '180px',\n                                            alignItems: 'center'\n                                            }}>\n                                                <div>\n                                                    <img src='/logo.png' style={{width: '50px',height: '50px'}}/>\n                                                </div>\n                                                <div><Typography variant='h4'>Actumjs</Typography></div>\n                                            </div>\n                                            <Typography variant='h4' align='center'>\n                                                Sorry,page not found\n                                            </Typography>\n                                            <Button component={'a'} href='/' variant='text' color='primary' >Back to home</Button>\n                                        </div>\n                                </Grid>\n\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n    }\n}\n","import React from 'react';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport GettingStarted from './components/gettingStarted';\n\nimport Footer from './components/Footer';\nimport APIPage from './components/apipage';\nimport Examples from './components/Examples';\nimport BasicReactExample from './components/usingWithReact';\nimport BasicVueExample from './components/usingWithVue'\nimport TodoAppWithReact from './components/todoAppWithReact';\nimport TodoAppWithVue from './components/todoAppWithVue';\nimport { PageNotFound } from './components/PageNotFound';\n\n\nclass  App extends React.Component{\n  getCurPage=()=>{\n    switch(window.location.pathname){\n      case '/':return <Home/>\n      case '/get-started' : return <GettingStarted/>\n      case '/api':return <APIPage/>\n      case '/examples': return <Examples/>\n      case '/basic-react-example': return <BasicReactExample/>\n      case '/basic-vue-example': return <BasicVueExample/>\n      case '/todo-app-with-react-example': return <TodoAppWithReact/>\n      case '/todo-app-with-vue-example': return <TodoAppWithVue/>\n    }\n    return <PageNotFound/>\n  }\n  render(){\n    let curPage=this.getCurPage();\n    return <>\n      <Header/>{curPage}<Footer/>\n    </>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}